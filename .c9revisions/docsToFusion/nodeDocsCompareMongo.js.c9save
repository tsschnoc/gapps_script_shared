{"ts":1342686556624,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var https = require('https');\r\nvar url = require('url');\r\n\r\nvar authHeaders = {};\r\n\r\n\r\n\r\n\r\nfunction doAuth() {\r\n//    var payload = 'Email=thomas.schnocklake@gmail.com&Passwd=k3%256%24ts&accountType=GOOG&source=Google-cURL-Example&service=writely';\r\n    var payload = 'Email=thomas.schnocklake@parx.com&Passwd=dkxflqlunhdltqhd&accountType=HOSTED&source=Google-cURL-Example&service=writely';\r\n    var options = {\r\n        host: 'www.google.com',\r\n        port: 443,\r\n        path: '/accounts/ClientLogin',\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: \"*/*\",\r\n            \"GData-Version\": \"3.0\",\r\n            \"If-match\": \"*\",\r\n            \"content-length\": payload.length,\r\n            \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n            \"accept\": \"*/*\"\r\n        }\r\n    };\r\n\r\n    var req = https.request(options, function(res) {\r\n//        console.log(\"statusCode: \", res.statusCode);\r\n//        console.log(\"headers: \", res.headers);\r\n        res.on('data', onAuth);\r\n    });\r\n\r\n\r\n    req.on('error', onErr);\r\n    req.write(payload);\r\n    req.end();\r\n}\r\n\r\nfunction onErr(e) {\r\n    console.error(e);\r\n}\r\n\r\nfunction onAuth(d) {\r\n    var s = \"\";\r\n    for (var v in d) {\r\n        s += String.fromCharCode(d[v]);\r\n    }\r\n    s = d.toString();\r\nconsole.log(s);\r\n    var auth = s;\r\n    auth = auth.substring(auth.indexOf(\"Auth=\") + 5, auth.length - 1);\r\n\r\n    authHeaders = {\r\n        \"Accept\": \"*/*\",\r\n        \"GData-Version\": \"3.0\",\r\n        \"Authorization\": \"GoogleLogin Auth=\" + auth\r\n    };\r\n//    fetchDocs('/feeds/default/private/full/-/%7Bhttp%3A%2F%2Fschemas.google.com%2Fg%2F2005%23kind%7Dimage%2Fjpeg?alt=json&q=owner%3Athomas.schnocklake%40googlemail.com+exif&max-results=300');\r\n//    fetchDocs('/feeds/default/private/full/-/%7Bhttp%3A%2F%2Fschemas.google.com%2Fg%2F2005%23kind%7Dimage%2Fjpeg?alt=json&q=owner%3Athomas.schnocklake%40googlemail.com');\r\n    fetchDocs('/feeds/default/private/full/-/%7Bhttp%3A%2F%2Fschemas.google.com%2Fg%2F2005%23kind%7Dimage%2Fjpeg?alt=json&q=owner%3Athomas.schnocklake%40parx.com&max-results=30');\r\n//    fetchDocs('/feeds/default/private/full/folder%3A0BypRkWZNPIz0cTRBZ0RFQmV5T0E/contents?alt=json&max-results=100');\r\n}\r\n\r\nvar responseString = '';\r\n\r\nfunction fetchDocs(myPath) {\r\n    var buf = '';\r\n    responseString = '';\r\n//    console.log(myPath);\r\n    var options = {\r\n        host: 'docs.google.com',\r\n        port: 443,\r\n        path: myPath,\r\n        method: 'GET',\r\n        headers: authHeaders\r\n    };\r\n    var req = https.request(options, function(res) {\r\n        console.log(\"statusCode: \", res.statusCode);\r\n        res.on('data', function(d) { buf += d.toString();} );\r\n        res.on('end', function() { onFetchDocsEnd(buf);});\r\n    });\r\n\r\n    req.on('error', onErr);\r\n    req.end();\r\n}\r\n\r\n\r\nfunction onFetchDocsEnd(docsListResult) {\r\n    var obj = JSON.parse(docsListResult);\r\n\r\n    var next = null;    \r\n    for (var j=0; j < obj.feed.link.length; j++) {\r\n        if (obj.feed.link[j].rel == 'next')\r\n        {\r\n            next = obj.feed.link[j].href;\r\n            break;\r\n        }\r\n    }\r\n\r\n    var md5List = [];\r\n    var docsist = [];\r\n    \r\n    for (var j=0; j < obj.feed.entry.length; j++) {\r\n        var entry = obj.feed.entry[j];\r\n//        console.log(JSON.stringify(entry,null,'\\t'));\r\n//        console.log(JSON.stringify(meta,null,'\\t'));\r\n        \r\n        //console.log(entry.docs$md5Checksum.$t);\r\n        md5List.push(entry.title.$t);\r\n        \r\n        var self = null;\r\n        for (var c=0; c < entry.link.length; c++) {\r\n            if (entry.link[c].rel == 'self')\r\n            {\r\n                self = entry.link[c].href;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        \r\n        var doc = {\r\n                id :  entry.id.$t,\r\n                md5 : entry.docs$md5Checksum.$t,\r\n                title : entry.title.$t,\r\n                self: self\r\n            };\r\n        \r\n        docsist.push(doc);\r\n        \r\n        //console.log(entry.docs$md5Checksum.$t);            \r\n        collection.findOne({\r\n            md5: doc.md5\r\n        }, function() {\r\n            var myDoc = doc;\r\n            return function(err, item) {\r\n                if (myDoc && item && myDoc.md5 == item.md5) {\r\n/*\r\n            console.log('===============err');\r\n                    console.log(err);\r\n                    console.log('doc');\r\n                    console.log(myDoc);\r\n                    console.log('item');\r\n                    console.log(item);\r\n        \r\n                    toAddIds.push(myDoc.id);\r\n  */      \r\n    \r\ndeleteDoc(myDoc.self);\r\n\r\n        \r\n                }\r\n            };\r\n        }());\r\n    }\r\n\r\n      //collection.insert({list: md5List});\r\n//    collection.insert(docsist, {safe:true}, function(err, result) {console.log(err);});\r\n\r\n//    console.log(md5List.join(' | '));\r\n\r\n//console.log(docsist);\r\n//collection.findOne({md5:docsist.md5}, function(err, item) {console.log(err);});\r\n\r\n    if (next) \r\n    {\r\n        fetchDocs(next.replace('https://docs.google.com',''));\r\n    }\r\n  \r\n}\r\n\r\n\r\nvar toAddIds = [];\r\n\r\nvar mongo = require('mongodb'),\r\n  Server = mongo.Server,\r\n  Db = mongo.Db;\r\n\r\nvar server = new Server('aws.schnocklake.com', 27017, {auto_reconnect: true});\r\nvar db = new Db('hans', server);\r\n\r\nvar collection = null;\r\n\r\ndb.open(function(err, db) {\r\n  if(!err) {\r\n    db.collection('docsList', function(err, col) {\r\n        collection = col;    \r\n        doAuth();\r\n    });\r\n  } else {\r\n    console.log('ohhh');        \r\n  }\r\n});\r\n\r\n\r\nfunction deleteDoc(self) {\r\n \r\n    var optionsX = {\r\n        host: 'docs.google.com',\r\n        port: 443,\r\n        path: self.substring(23),\r\n        method: 'DELETE',\r\n        headers: {\r\n            Accept: \"*/*\",\r\n            \"GData-Version\": \"3.0\",\r\n            \"If-match\": \"*\",\r\n            \"Authorization\": authHeaders.Authorization\r\n        }\r\n    };\r\n    var myreq = https.request(optionsX, function(res2) {\r\n\r\n\r\n        console.log(\"statusCode: \", res2.statusCode);\r\n//        console.log(\"headers: \", res2.headers);\r\n        res2.on('data', function(d){\r\n//            console.log(d.toString()) ;\r\n            });\r\n\r\n\r\n        });\r\n    myreq.end();\r\n\r\n//    console.log(optionsX);\r\n           \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]],"start1":0,"start2":0,"length1":0,"length2":6307}]],"length":6307}
