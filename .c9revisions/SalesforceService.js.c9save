{"ts":1358149078544,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"SalesforceService = {\n  _url : 'https://secure.solve360.com',\n  _username : null,\n  _password : null,\n  _authinfo : null,\n\n  /**\n   * Sets the credentials authentication string\n   */\n  setCredentials : function(username, password, url) {\n    this._url = url;  \n    this._username = username;\n    this._password = password;\n  },\n\n  /**\n   * Sets the base url\n   */\n  setUrl : function(url) {\n    this._url = url;\n  },\n  login: function() {\n    try {\n      var param = [\"urn:login\", [\"urn:username\", this._username],\n        [\"urn:password\", this._password]\n      ];\n      var result = this.doPartnerSoapRequest(\n      this._url + '/services/Soap/u/19.0', param);\n      //Logger.log(result.Envelope.Body.loginResponse.result.sessionId.getText());\n      //Logger.log(result.Envelope.Body.loginResponse.result.serverUrl.getText());\n      //  return result.Envelope.Body.loginResponse.result.sessionId.getText();\n      var retParam = {};\n      retParam.sessionId =\n        result.Envelope.Body.loginResponse.result.sessionId.getText();\n      retParam.serverUrl =\n        result.Envelope.Body.loginResponse.result.serverUrl.getText();\n      retParam.metadataServerUrl =\n        result.Envelope.Body.loginResponse.result.metadataServerUrl.getText();\n        \n        \n      retParam.restServerUrl = retParam.serverUrl.split(\"/\")[2];\n      retParam.restServerUrl = retParam.restServerUrl.replace(\"-api\",\"\");\n      retParam.restServerUrl = \"https://\" + retParam.restServerUrl;\n        \n        \n        \n        \n      this._authinfo = retParam;\n    }\n    catch (err) {\n      throw new Error('Login not possible (check username, password, url)');\n    }\n  },\n\n  doPartnerSoapRequest : function(url, body, header) {\n    var req = \n      [\"soapenv:Envelope\",\n        {\"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\"}, \n        {\"xmlns:meta\": \"http://soap.sforce.com/2006/04/metadata\"}, \n        {\"xmlns:urn\": \"urn:partner.soap.sforce.com\"}, \n        {\"xmlns:xsi\": \"http://www.w3.org/2001/XMLSchema-instance\"},\n        [\"soapenv:Header\", header],\n        [\"soapenv:Body\", body]\n      ];\n      \n      //Logger.log(body);\n      //Logger.log(Xml.parseJS(req).toXmlString());\n      var options = {\n          \"method\": \"post\",\n          \"contentType\": \"text/xml;charset=UTF-8\",\n          \"payload\": Xml.parseJS(req).toXmlString(),\n          \"headers\": {\n              SOAPAction: \"\\\"\\\"\"\n          }\n      };\n      var fetchRes = UrlFetchApp.fetch(url, options);\n      //Logger.log(fetchRes.getContentText());\n      //Logger.log(url);\n      var result = Xml.parse(fetchRes.getContentText(), false);\n      return result;\n  },\n  \n  getObjectFields: function(sf_objectname) {\n    if (this._authinfo === null) {\n      this.login();  \n    }\n    \n    //Logger.log(this._authinfo.serverUrl.split(\"/\")[2]);\n   \n   \n    var queryUrl = this._authinfo.restServerUrl + \n      \"/services/data/v20.0/sobjects/\" + \n      encodeURIComponent(sf_objectname) + \"/describe/\";\n      \n    var response = null;\n    try {\n      response = UrlFetchApp.fetch(queryUrl, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": \"OAuth \" + this._authinfo.sessionId\n        }\n      });\n    }\n    catch (err) {\n      Logger.log(err);\n      this.login();\n      response = UrlFetchApp.fetch(queryUrl, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": \"OAuth \" + this._authinfo.sessionId\n        }\n      });\n    }\n    \n    //Logger.log(response.getContentText());    \n    var queryResult = Utilities.jsonParse(response.getContentText());\n    fieldNames = [];\n    queryResult.fields.forEach(function(field, i) {\n//      Logger.log(field.name);\n      fieldNames.push(field.name);\n    });\n    //Logger.log(fieldNames);\n    return fieldNames;\n  },\n  \n  \n  readObjectValues: function(sf_objectname, fieldNames, where) {\n    if (this._authinfo === null) {\n      this.login();  \n    }\n    \n    \n    var sql = \"SELECT \";\n    for (var i = 0; i < fieldNames.length; i++) {\n      sql = sql + fieldNames[i] + \", \";\n    }\n    sql = sql.substring(0, sql.length - 2);\n    Logger.log(sql);\n    sql = sql + \" from \" + sf_objectname + \" \";\n    if (where !== null) {\n      sql += ' where ' + where; \n    }\n    Logger.log(sql);\n    var queryUrl = \"/services/data/v21.0/query?q=\" + encodeURIComponent(sql);\n    var lines = [];\n    while (queryUrl !== null) {\n      var response = UrlFetchApp.fetch(this._authinfo.restServerUrl + queryUrl, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": \"OAuth \" + this._authinfo.sessionId\n        }\n      });\n      Logger.log(response.getContentText());\n      var queryResult = Utilities.jsonParse(response.getContentText());\n      \n      var line = [];\n      // Render result records into cells\n      queryResult.records.forEach(function(record, i) {\n        line = [];\n        fieldNames.forEach(function(field, j) {\n          line.push(record[field]);\n          SalesforceService.getValueInSobject(record, field);\n        });\n        //      Logger.log(line);\n        lines.push(line);\n      });\n      \n      queryUrl = queryResult.nextRecordsUrl;\n      Logger.log(\"!!!!!!!!!!!!!!!!!!!!!!\" + queryUrl);\n    }\n    \n    \n    \n    \n    return lines;\n  },\n  \n  \n  getValueInSobject: function(sobject, fieldNames) {\n    var val = sobject;\n    fieldNames.split(\".\").forEach(function(name, i) {\n      val = val[name];  \n    });\n    return val;\n  },\n  \n  insertToSf : function(sf_objectname, fieldNames, records) {\n    if (this._authinfo === null) {\n      this.login();  \n    }\n    \n    var stmts = [];\n    Logger.log(fieldNames);\n    records.forEach(function(record, i) {\n      var stmt = {};\n      record.forEach(function(value, j) {\n        if (\n          fieldNames[j] == \"Id\" || \n          fieldNames[j] == \"IsDeleted\" || \n          fieldNames[j] == \"SetupOwnerId\" || \n          fieldNames[j] == \"CreatedDate\" || \n          fieldNames[j] == \"CreatedById\" || \n          fieldNames[j] == \"LastModifiedDate\" || \n          fieldNames[j] == \"LastModifiedById\" || \n          fieldNames[j] == \"SystemModstamp\") {}\n        else {\n//          stmt[fieldNames[j]] = value;        \n          insertToSObject(stmt, fieldNames[j], value);\n        }\n      });\n      Logger.log(\"JSON: \" + JSON.stringify(stmt));\n      stmts.push(stmt);\n    });\n    \n\n    var queryUrl = this._authinfo.restServerUrl + \n      \"/services/data/v20.0/sobjects/\" + \n      encodeURIComponent(sf_objectname) + \"/\";\n     \n    var sessionId = this._authinfo.sessionId; \n    \n    stmts.forEach(function(stmt, j) {\n      \n      var payload = JSON.stringify(stmt);\n      var response = UrlFetchApp.fetch(queryUrl, {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": \"OAuth \" + sessionId\n        },\n        contentType: \"application/json\",\n        payload: payload\n      });\n      var queryResult = Utilities.jsonParse(response.getContentText());\n      Logger.log(queryResult);\n    });\n  },\n  \n  \n  \n  \n  dump : ''\n};\n\n \nfunction insertToSObject(sObject, fieldName, value) {\n  var name_comp = fieldName.split(\".\");\n  var val = null;\n  for (i = name_comp.length - 1; i >= 0; i--) {\n    if (val === null) {\n      val = {};\n      val[name_comp[i]] = value;\n    }\n    else {\n      var newVal = {};\n      newVal[name_comp[i]] = val;\n      val = newVal;\n    }\n    Logger.log(val);\n  }\n  MergeObjectsRecursive(sObject, val);\n}\n\nfunction MergeObjectsRecursive(obj1, obj2) {\n  for (var p in obj2) {\n    try {\n      // Property in destination object set; update its value.\n      if (obj2[p].constructor == Object) {\n        obj1[p] = MergeRecursive(obj1[p], obj2[p]);\n      }\n      else {\n        obj1[p] = obj2[p];\n      }\n    }\n    catch (e) {\n      // Property in destination object not set; create it and set its value.\n      obj1[p] = obj2[p];\n    }\n  }\n  return obj1;\n}"]],"start1":0,"start2":0,"length1":0,"length2":7770}]],"length":7770}
