{"ts":1351264072686,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var https = require('https');\r\nvar url = require('url');\r\n\r\nvar authHeaders = {}\r\n\r\nfunction doAuth() {\r\n    var payload = 'Email=thomas.schnocklake@gmail.com&Passwd=k3%256%24ts&accountType=GOOG&source=Google-cURL-Example&service=writely';\r\n    var options = {\r\n        host: 'www.google.com',\r\n        port: 443,\r\n        path: '/accounts/ClientLogin',\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: \"*/*\",\r\n            \"GData-Version\": \"3.0\",\r\n            \"If-match\": \"*\",\r\n            \"content-length\": payload.length,\r\n            \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n            \"accept\": \"*/*\",\r\n        },\r\n    };\r\n\r\n    var req = https.request(options, function(res) {\r\n        console.log(\"statusCode: \", res.statusCode);\r\n//        console.log(\"headers: \", res.headers);\r\n        res.on('data', onAuth);\r\n    });\r\n\r\n\r\n    req.on('error', onErr);\r\n    req.write(payload);\r\n    req.end();\r\n}\r\n\r\nfunction onErr(e) {\r\n    console.error(e);\r\n}\r\n\r\nfunction onAuth(d) {\r\n    var s = \"\";\r\n    for (var v in d) {\r\n        s += String.fromCharCode(d[v]);\r\n    }\r\n\r\n    var auth = s;\r\n    auth = auth.substring(auth.indexOf(\"Auth=\") + 5, auth.length - 1);\r\n    process.stdout.write(auth);\r\n\r\n    authHeaders = {\r\n        \"Accept\": \"*/*\",\r\n        \"GData-Version\": \"3.0\",\r\n        \"Authorization\": \"GoogleLogin Auth=\" + auth,\r\n    };\r\n    fetchDocs();\r\n}\r\n\r\nvar responseString = \"\";\r\n\r\nfunction fetchDocs() {\r\n    var options = {\r\n        host: 'docs.google.com',\r\n        port: 443,\r\n        path: '/feeds/default/private/full/-/%7Bhttp%3A%2F%2Fschemas.google.com%2Fg%2F2005%23kind%7Dimage%2Fjpeg?alt=json&q=owner%3Athomas.schnocklake%40googlemail.com+-exif&max-results=100',\r\n        method: 'GET',\r\n        headers: authHeaders,\r\n    };\r\n    var req = https.request(options, function(res) {\r\n        console.log(\"statusCode: \", res.statusCode);\r\n        res.on('data', onFetchDocsData);\r\n        res.on('end', onFetchDocsEnd);\r\n    });\r\n\r\n    req.on('error', onErr);\r\n    req.end();\r\n}\r\n\r\nfunction onFetchDocsData(d) {\r\n    var x = d.toString();\r\n    responseString += x;\r\n}\r\n\r\n\r\nfunction onFetchDocsEnd() {\r\n\r\n    var obj = JSON.parse(responseString);\r\n    //    process.stdout.write(JSON.stringify(obj));\r\n    for (var i in obj.feed.entry) {\r\n        var documentListEntry = obj.feed.entry[i];\r\n\r\n        var options = url.parse(documentListEntry.content.src);\r\n        options.method= 'GET';\r\n        options['If-match']= \"*\";\r\n        options.headers = {};\r\n        options.headers.Accept = authHeaders.Accept;\r\n        options.headers.Authorization = authHeaders.Authorization;\r\n        options.headers['GData-Version'] = authHeaders['GData-Version'];\r\n        \r\n        options.headers.Range= \"bytes=0-99999\";\r\n        console.log(\"documentListEntry: \" + documentListEntry.id.$t);\r\n\r\n        doRequest(options, documentListEntry);     \r\n    }\r\n}\r\n\r\n\r\n  function doRequest(options, documentListEntry)\r\n  {\r\n    var req = https.request(options, function(res) {contentResponse(res, documentListEntry);});        \r\n    req.on('error', onErr);\r\n    req.end();                \r\n  }\r\n\r\n  function doExif( documentListEntry)\r\n  {\r\n    var child;\r\n\r\n    child = exec(\"exiftool -G -j -\", function (error, stdout, stderr) {\r\n        getExif(error, stdout, stderr, documentListEntry);\r\n  \r\n    });\r\n    return child;    \r\n      \r\n  }\r\n\r\n  function getExif(error, stdout, stderr, documentListEntry) {\r\n    onSourceReceivedEnd(stdout, documentListEntry);\r\n//    console.log('documentListEntry: ' + documentListEntry.id.$t);\r\n//    console.log('stdout: ' + stdout);\r\n//      console.log('stderr: ' + stderr);\r\n      if (error !== null) {\r\n        console.log('exec error: ' + error);\r\n      }\r\n  }\r\n\r\n\r\nfunction contentResponse(res,dle) {\r\n  console.log(\"statusCode: \", res.statusCode);\r\n  //            console.log(\"headers: \", res.headers);\r\n\r\n    var child;\r\n\r\n    child = doExif(dle);\r\n    \r\n\r\n    res.on('data', function(chunk) {\r\n//        console.log(\"chunk    \" + chunk.toString(\"base64\") );\r\n        child.stdin.write(chunk);\r\n    });\r\n\r\n    res.on('end', function() {\r\n        child.stdin.end();\r\n        //    onSourceReceivedEnd(null, dle);\r\n    });\r\n}\r\n\r\nfunction onSourceReceivedEnd(data, documentListEntry1) {\r\n//    console.log(\"onEditLinkDate data: \" + data.length);\r\n//    console.log(\"onEditLinkDate documentListEntry1 docs$md5Checksum: \" + JSON.stringify(documentListEntry1.docs$md5Checksum.$t,null,'\\t'));\r\n\r\n    var exif = JSON.parse(data)[0];\r\n    \r\n    \r\n    \r\n    var desc = {};\r\n    desc.md5sum = documentListEntry1.docs$md5Checksum.$t;\r\n    \r\n    console.log(\"onSourceReceivedEnd: \" + documentListEntry1.id.$t);\r\n    \r\n    for (var m in exif) {\r\n      if (typeof exif[m] == \"object\") {\r\n        var s = \"\";\r\n        for (var v in exif[m]) {s += String.fromCharCode(exif[m][v]);}\r\n        delete exif[m];\r\n      }\r\n    }\r\n \r\n    desc.exif = exif;\r\n    \r\n console.log(\"desc: \" + JSON.stringify(desc,null, \"\\t\"));\r\n\r\n    \r\n   var editLink;\r\n    for (var j in documentListEntry1.link) {\r\n      if (documentListEntry1.link[j].rel == 'edit') {\r\n        editLink = documentListEntry1.link[j];\r\n      }\r\n    }\r\n    //console.log(editLink);\r\n    \r\n    var payload =  '<?xml version=\"1.0\" encoding=\"utf-8\"?>';\r\n    payload += '<entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:docs=\"http://schemas.google.com/docs/2007\"><docs:description>' + JSON.stringify(desc,null, \"\\t\") + '</docs:description></entry>';\r\n\r\n    var options = url.parse(editLink.href);\r\n    \r\n    options.method= 'PUT';    \r\n    options.headers = {};\r\n    options.headers['If-match']= \"*\";\r\n    options.headers.Accept = authHeaders.Accept;\r\n    options.headers.Authorization = authHeaders.Authorization;\r\n    options.headers['GData-Version'] = authHeaders['GData-Version'];\r\n    options.headers['content-length'] = payload.length;\r\n    options.headers['content-type'] = \"application/atom+xml; charset=UTF-8\";\r\n\r\n\r\n    var req = https.request(options, function(res) {\r\n        console.log(\"statusCode: \", res.statusCode);\r\n        //console.log(\"update headers: \", res.headers);\r\n        \r\n        \r\n        \r\n            res.on('data', function(chunk) { \r\n             \r\n              \r\n          //    console.log(chunk.toString());\r\n            }) ;\r\n        \r\n         \r\n    });\r\n\r\n    req.on('error', onErr);\r\n\r\n    req.write(payload);\r\n    req.end();\r\n  \r\n}\r\n\r\n\r\nvar exec = require('child_process').exec;\r\n\r\ndoAuth();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]],"start1":0,"start2":0,"length1":0,"length2":6529}]],"length":6529}
