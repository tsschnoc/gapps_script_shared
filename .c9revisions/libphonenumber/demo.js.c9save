{"ts":1370430763673,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * @license\n * Copyright (C) 2010 The Libphonenumber Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview  Phone Number Parser Demo.\n *\n * @author Nikolaos Trogkanis\n */\n\ngoog.require('goog.dom');\ngoog.require('goog.json');\ngoog.require('goog.proto2.ObjectSerializer');\ngoog.require('goog.string.StringBuffer');\ngoog.require('i18n.phonenumbers.AsYouTypeFormatter');\ngoog.require('i18n.phonenumbers.PhoneNumberFormat');\ngoog.require('i18n.phonenumbers.PhoneNumberType');\ngoog.require('i18n.phonenumbers.PhoneNumberUtil');\ngoog.require('i18n.phonenumbers.PhoneNumberUtil.ValidationResult');\n\n\nfunction phoneNumberParser() {\n  var $ = goog.dom.getElement;\n  var phoneNumber = $('phoneNumber').value;\n  var regionCode = $('defaultCountry').value;\n  var carrierCode = $('carrierCode').value;\n  var output = new goog.string.StringBuffer();\n  try {\n    var phoneUtil = i18n.phonenumbers.PhoneNumberUtil.getInstance();\n    var number = phoneUtil.parseAndKeepRawInput(phoneNumber, regionCode);\n    output.append('****Parsing Result:****\\n');\n    output.append(goog.json.serialize(new goog.proto2.ObjectSerializer(\n        goog.proto2.ObjectSerializer.KeyOption.NAME).serialize(number)));\n    output.append('\\n\\n****Validation Results:****');\n    var isPossible = phoneUtil.isPossibleNumber(number);\n    output.append('\\nResult from isPossibleNumber(): ');\n    output.append(isPossible);\n    if (!isPossible) {\n      output.append('\\nResult from isPossibleNumberWithReason(): ');\n      var PNV = i18n.phonenumbers.PhoneNumberUtil.ValidationResult;\n      switch (phoneUtil.isPossibleNumberWithReason(number)) {\n        case PNV.INVALID_COUNTRY_CODE:\n          output.append('INVALID_COUNTRY_CODE');\n          break;\n        case PNV.TOO_SHORT:\n          output.append('TOO_SHORT');\n          break;\n        case PNV.TOO_LONG:\n          output.append('TOO_LONG');\n          break;\n      }\n      // IS_POSSIBLE shouldn't happen, since we only call this if _not_\n      // possible.\n      output.append('\\nNote: numbers that are not possible have type ' +\n          'UNKNOWN, an unknown region, and are considered invalid.');\n    } else {\n      var isNumberValid = phoneUtil.isValidNumber(number);\n      output.append('\\nResult from isValidNumber(): ');\n      output.append(isNumberValid);\n      if (isNumberValid && regionCode && regionCode != 'ZZ') {\n        output.append('\\nResult from isValidNumberForRegion(): ');\n        output.append(phoneUtil.isValidNumberForRegion(number, regionCode));\n      }\n      output.append('\\nPhone Number region: ');\n      output.append(phoneUtil.getRegionCodeForNumber(number));\n      output.append('\\nResult from getNumberType(): ');\n      var PNT = i18n.phonenumbers.PhoneNumberType;\n      switch (phoneUtil.getNumberType(number)) {\n        case PNT.FIXED_LINE:\n          output.append('FIXED_LINE');\n          break;\n        case PNT.MOBILE:\n          output.append('MOBILE');\n          break;\n        case PNT.FIXED_LINE_OR_MOBILE:\n          output.append('FIXED_LINE_OR_MOBILE');\n          break;\n        case PNT.TOLL_FREE:\n          output.append('TOLL_FREE');\n          break;\n        case PNT.PREMIUM_RATE:\n          output.append('PREMIUM_RATE');\n          break;\n        case PNT.SHARED_COST:\n          output.append('SHARED_COST');\n          break;\n        case PNT.VOIP:\n          output.append('VOIP');\n          break;\n        case PNT.PERSONAL_NUMBER:\n          output.append('PERSONAL_NUMBER');\n          break;\n        case PNT.PAGER:\n          output.append('PAGER');\n          break;\n        case PNT.UAN:\n          output.append('UAN');\n          break;\n        case PNT.UNKNOWN:\n          output.append('UNKNOWN');\n          break;\n      }\n    }\n    var PNF = i18n.phonenumbers.PhoneNumberFormat;\n    output.append('\\n\\n****Formatting Results:**** ');\n    output.append('\\nE164 format: ');\n    output.append(isNumberValid ?\n                  phoneUtil.format(number, PNF.E164) :\n                  'invalid');\n    output.append('\\nOriginal format: ');\n    output.append(phoneUtil.formatInOriginalFormat(number, regionCode));\n    output.append('\\nNational format: ');\n    output.append(phoneUtil.format(number, PNF.NATIONAL));\n    output.append('\\nInternational format: ');\n    output.append(isNumberValid ?\n                  phoneUtil.format(number, PNF.INTERNATIONAL) :\n                  'invalid');\n    output.append('\\nOut-of-country format from US: ');\n    output.append(isNumberValid ?\n                  phoneUtil.formatOutOfCountryCallingNumber(number, 'US') :\n                  'invalid');\n    output.append('\\nOut-of-country format from Switzerland: ');\n    output.append(isNumberValid ?\n                  phoneUtil.formatOutOfCountryCallingNumber(number, 'CH') :\n                  'invalid');\n    if (carrierCode.length > 0) {\n      output.append('\\nNational format with carrier code: ');\n      output.append(phoneUtil.formatNationalNumberWithCarrierCode(number,\n                                                                  carrierCode));\n    }\n    output.append('\\n\\n****AsYouTypeFormatter Results****');\n    var formatter = new i18n.phonenumbers.AsYouTypeFormatter(regionCode);\n    var phoneNumberLength = phoneNumber.length;\n    for (var i = 0; i < phoneNumberLength; ++i) {\n      var inputChar = phoneNumber.charAt(i);\n      output.append('\\nChar entered: ');\n      output.append(inputChar);\n      output.append(' Output: ');\n      output.append(formatter.inputDigit(inputChar));\n    }\n  } catch (e) {\n    output.append('\\n' + e);\n  }\n  $('output').value = output.toString();\n  return false;\n}\n\ngoog.exportSymbol('phoneNumberParser', phoneNumberParser);\n"]],"start1":0,"start2":0,"length1":0,"length2":6155}]],"length":6155}
