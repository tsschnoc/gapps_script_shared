{"ts":1358371518358,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var sip = require('sip');\nvar http = require('http');\nvar digest = require('sip/digest');\nvar sf = require('node-salesforce');\n//var Pusher = require('node-pusher');\n\n\n\nvar mysipport = '5080';\nvar myhost = null;\n\nmyhost = process.env.IP;\nmysipport = process.env.PORT;\n\n\nvar sipRegMap = {};\n\nsip.start({\n    port: mysipport,\n    logger: {\n        //      send: function(message, address) { util.debug(\"send\\n\" + util.inspect(message, false, null)); },\n        //      recv: function(message, address) { util.debug(\"recv\\n\" + util.inspect(message, false, null)); }\n    }\n\n}, function(rq) {\n    console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');\n    console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');\n    console.log(JSON.stringify(rq, null, '\\t'));\n\n\n    var sipFrom = rq.headers.from.uri;\n    var sipTo = rq.headers.to.uri;\n    var callId = rq.headers['call-id'];\n    var now = new Date();\n    var jsonDate = now.toJSON();\n\n    console.log('sipFrom ' + sipFrom);\n    console.log('sipTo ' + sipTo);\n    console.log('callId ' + callId);\n\n    var sipSubscription = sipRegMap[sipTo.split(':')[1].split('@')[0] ];\n\n    console.log(\"sipTo.split(':')[1].split('@')[0] \" + sipTo.split(':')[1].split('@')[0]);\n    console.log('sipSubscription ' + sipSubscription);\n    \n\n    if (rq.method === 'INVITE') {\n        sip.send(sip.makeResponse(rq, 180, 'Ringing'));\n\n        var updObj = {\n            CallId__c: callId,\n            From__c: sipFrom,\n            To__c: sipTo,\n            TimestampRing__c: jsonDate\n        };\n        console.log(updObj);\n        sipSubscription.sfConn.sobject(\"SipLog__c\").upsert(updObj, 'CallId__c', function(err, ret) {\n            if (err) {\n                console.log('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!upsert ring Error:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!');\n                console.log(err);\n                console.log(JSON.stringify(err, null, '\\t'));\n            }\n            if (!err && ret.success) {\n                console.log('Upserted Successfully');\n            }\n        });\n        \n    }\n    else if (rq.method === 'CANCEL') {\n        var updObj2 = {\n            CallId__c: callId,\n            From__c: sipFrom,\n            To__c: sipTo,\n            TimestampCancel__c: jsonDate\n        };\n        console.log(updObj2);\n/*\n        sipSubscription.sfConn.sobject(\"SipLog__c\").upsert(updObj2, 'CallId__c', function(err, ret) {\n            if (err) {\n                console.log('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Upsert  cancel Error:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!');\n                console.log(err);\n                console.log(JSON.stringify(err, null, '\\t'));\n            }\n            if (!err && ret.success) {\n                console.log('Upserted Successfully');\n            }\n        });        \n*/        \n    }\n \n    console.log('XXXXXXXXXXXXXXX           done XXXXXXXXXXXXXXXXXXXXXXX');\n});\n\n\n\n\nfunction SipSubscriber(uri, cred, sfdcCred) {\n    this.uri = uri;\n    this.cred = cred;\n    this.sfdcCred = sfdcCred;\n    this.sfConn = null;\n\n    this.regTries = 0;\n    this.authReg = {\n        method: 'REGISTER',\n        uri: this.uri,\n        headers: {\n            to: {\n                name: 'Thomas Schnocklake',\n                uri: this.uri\n            },\n            from: {\n                name: 'Thomas Schnocklake',\n                uri: this.uri,\n                params: {\n                    tag: '12345678'\n                }\n            },\n            'call-id': Math.floor(Math.random() * 1e6),\n            cseq: {\n                method: 'REGISTER',\n                seq: 1\n            },\n            event: 'dialog',\n            accept: 'application/dialog-info+xml',\n            expires: 600,\n            contact: [{\n                name: 'Thomas Schnocklake',\n                uri: 'sip:' + myhost + ':' + mysipport\n            }]\n        }\n    };\n\n    this.regCallback = function(rs) {\n        console.log('   ----- register Callback: this.uri = ' + this.uri + ' rs.status = ' + rs.status + ' this.regTries = ' + this.regTries);\n        console.log(JSON.stringify(rs,null,'\\t'));    \n\n        if (rs.status === 401) //reason Unauthorized\n        {\n            digest.signRequest({\n                realm: this.cred.realm\n            }, this.authReg, rs, this.cred);\n            this.register();\n        }\n        else if (rs.status === 200) //reason OK\n        {\n            console.log('------------------------REGISTERED------------------------------------');\n            console.log(rs.headers.contact);\n            var _this = this;\n            setTimeout(function() {\n                console.log('------------------------REREGISTERIND------------------------------------');\n                _this.regTries = 0;\n                _this.authReg.headers.cseq.seq++;\n                delete _this.authReg.headers[\"www-authenticate\"];\n                _this.register();\n            }, 50000);\n        }\n\n    };\n\n}\n\nSipSubscriber.prototype.register = function() {\n    this.regTries++;\n    delete this.authReg.headers.via;\n    var _this = this;\n    console.log(JSON.stringify(this.authReg,null,'\\t'));    \n    \n    sip.send(this.authReg, function(rs) {\n        _this.regCallback(rs);\n    });\n    //  sip.send(this.authReg, this.regCallback);\n};\n\nSipSubscriber.prototype.sfLogin = function() {\n    if (!this.sfConn) {\n        this.sfConn = new sf.Connection({\n            loginUrl: this.sfdcCred.loginUrl\n        });\n    }\n\n    var _this = this;\n\n    this.sfConn.login(this.sfdcCred.username, this.sfdcCred.password + this.sfdcCred.token, function(err) {\n        if (!err) {\n            console.log('------------------------Login SF token------------------------------------');\n            console.log(_this.sfConn.accessToken);\n\n            setTimeout(function() {\n                console.log('------------------------RE Login SF------------------------------------');\n                _this.sfLogin();\n            }, 3600000);\n\n\n        }\n        else {\n            console.log(err);\n        }\n    });\n\n};\n\n/*\n//http://169.254.169.254/latest/meta-data/public-hostname\nvar req = http.request({\n    host: '169.254.169.254',\n    port: 80,\n    path: '/latest/meta-data/public-hostname',\n    method: 'GET'\n}, function(res) {\n    res.setEncoding('utf8');\n    res.on('data', function(chunk) {\n        console.log('BODY: ' + chunk);\n        myhost = '' + chunk;\n        console.log('sip:' + myhost + ':' + mysipport);\n        startStack();\n    });\n    res.on('error', function(e) {\n        console.log('problem with request: ' + e.message);\n    });\n});\nreq.end();\n\n*/\n\nstartStack();\n\nfunction startStack() {\n    var sub;\n\n    sub = new SipSubscriber('sip:0435009722.320@sip12.e-fon.ch', {\n        user: '0435009722.320',\n        password: 'parxwerk123'\n    }, {\n        loginUrl: 'https://login.salesforce.com',\n        username: 'thomas.schnocklake.sfdc1@gmail.com',\n        password: 'Mail2GoAway',\n        token: 'Lo4rMXTSWwqCeH7sClgWs1Y9'\n    });\n\n    sipRegMap[sub.cred.user] = sub;\n    console.log(sub);\n    \n    sub.register();\n    //sub.sfLogin();\n    \n    /*\n    \n    sub = new SipSubscriber('sip:0435009738.320@sip12.e-fon.ch', {\n        user: '0435009738.320',\n        password: 'parxwerk123'\n    }, {\n        loginUrl: 'https://login.salesforce.com',\n        username: 'thomas.schnocklake.sfdc1@gmail.com',\n        password: 'Mail2GoAway',\n        token: 'Lo4rMXTSWwqCeH7sClgWs1Y9'\n    });\n\n    sipRegMap[sub.cred.user] = sub;\n    sub.register();\n    sub.sfLogin();\n\n    sub = new SipSubscriber('sip:2797608e0@sipgate.de', {\n        user: '2797608e0',\n        password: 'DTMSMG'\n    }, {\n        loginUrl: 'https://login.salesforce.com',\n        username: 'thomas.schnocklake.sfdc1@gmail.com',\n        password: 'Mail2GoAway',\n        token: 'Lo4rMXTSWwqCeH7sClgWs1Y9'\n    });\n\n    sipRegMap['004928723073370'] = sub;\n    sub.register();\n    sub.sfLogin();\n    \n    \n    \n    uri, cred, sfdcCred\n    {uri : 'sip:0435009738.320@sip12.e-fon.ch', \n     cred : cred{\n        user: '0435009738.320',\n        password: 'parxwerk123'\n    }, \n    sfdcCred = {\n        loginUrl: 'https://login.salesforce.com',\n        username: 'thomas.schnocklake.sfdc1@gmail.com',\n        password: 'Mail2GoAway',\n        token: 'Lo4rMXTSWwqCeH7sClgWs1Y9'\n    }\n    }\n    \n*/\n}"]],"start1":0,"start2":0,"length1":0,"length2":8237}]],"length":8237}
{"contributors":[],"silentsave":true,"ts":1358371551727,"patch":[[{"diffs":[[0,"   method: '"],[-1,"REGISTER"],[1,"SUBSCRIBE"],[0,"',\n        u"]],"start1":3061,"start2":3061,"length1":32,"length2":33},{"diffs":[[0,"ethod: '"],[-1,"REGISTER"],[1,"SUBSCRIBE"],[0,"',\n     "]],"start1":3517,"start2":3517,"length1":24,"length2":25},{"diffs":[[0,"  ----- "],[-1,"register"],[1,"SUBSCRIBE"],[0," Callbac"]],"start1":3897,"start2":3897,"length1":24,"length2":25},{"diffs":[[0,"       this."],[-1,"register"],[1,"SUBSCRIBE"],[0,"();\n        "]],"start1":4260,"start2":4260,"length1":32,"length2":33},{"diffs":[[0,"--------"],[-1,"REGISTER"],[1,"SUBSCRIBE"],[0,"ED------"]],"start1":4394,"start2":4394,"length1":24,"length2":25},{"diffs":[[0,"--RE"],[-1,"REGISTER"],[1,"SUBSCRIBE"],[0,"IND-"]],"start1":4615,"start2":4615,"length1":16,"length2":17},{"diffs":[[0,"  _this."],[-1,"register"],[1,"SUBSCRIBE"],[0,"();\n    "]],"start1":4837,"start2":4837,"length1":24,"length2":25},{"diffs":[[0,"ototype."],[-1,"register"],[1,"SUBSCRIBE"],[0," = funct"]],"start1":4919,"start2":4919,"length1":24,"length2":25},{"diffs":[[0,"   \n    sub."],[-1,"register"],[1,"SUBSCRIBE"],[0,"();\n    //su"]],"start1":6990,"start2":6990,"length1":32,"length2":33},{"diffs":[[0,"ub;\n    sub."],[-1,"register"],[1,"SUBSCRIBE"],[0,"();\n    sub."]],"start1":7415,"start2":7415,"length1":32,"length2":33},{"diffs":[[0,"sub."],[-1,"register"],[1,"SUBSCRIBE"],[0,"();\n"]],"start1":7815,"start2":7815,"length1":16,"length2":17}]],"length":8248,"saved":false}
{"contributors":[],"silentsave":true,"ts":1358516960501,"patch":[[{"diffs":[[0,"l, '\\t'));\n\n"],[1," "],[0,"\n    var sip"]],"start1":744,"start2":744,"length1":24,"length2":25}]],"length":8249,"saved":false}
