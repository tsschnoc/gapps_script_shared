{"ts":1362757253153,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1362757255759,"patch":[[{"diffs":[[1,"var sf = require('./node-salesforce-extensions.js');\r\nvar fs = require(\"fs\");\r\nvar http = require(\"http\");\r\nvar https = require(\"https\");\r\nvar _ = require('underscore');\r\n\r\nvar keys_dir = '../cert/';\r\nvar ssl_options = { \r\n  key  : fs.readFileSync(keys_dir + 'privatekey.pem'),\r\n  ca   : fs.readFileSync(keys_dir + 'certrequest.csr'), \r\n  cert : fs.readFileSync(keys_dir + 'certificate.pem') \r\n};\r\n\r\nvar host = 'tsschnoc.koding.com';\r\nvar port = process.env.PORT || 8443;\r\nvar express = require('express');\r\n\r\nvar passport = require('passport')\r\n  , ForceDotComStrategy = require('passport-forcedotcom').Strategy;\r\n\r\n//define passport usage\r\npassport.use(new ForceDotComStrategy({\r\n    authorizationURL: 'https://login.salesforce.com/services/oauth2/authorize',\r\n    tokenURL: 'https://login.salesforce.com/services/oauth2/token',\r\n    clientID: '3MVG9yZ.WNe6byQCAGhFiyIdi25qzAp6Cj2dUK9lrKM7EnWM8vS6Mh9wo.59a89__lgskSX5excnuf5eD0ixH',\r\n    clientSecret: '4315485479493730266',\r\n    callbackURL: 'https://tsschnoc.koding.com:8443/token'\r\n  },\r\n  function(token, tokenSecret, profile, done) {\r\n    console.log(profile);\r\n    return done(null, profile);\r\n  }\r\n));\r\n\r\n\r\n//define REST proxy options based on logged in user\r\npassport.serializeUser(function(user, done) {\r\n  done(null, user);\r\n});\r\n\r\npassport.deserializeUser(function(obj, done) {\r\n  done(null, obj);\r\n});\r\n\r\nfunction checkSession(req) {\r\n  var logins = {\r\n    fdc_user : false,\r\n    fdc_user_id : null,\r\n    fb_user : false,\r\n    fb_user_id : null,\r\n    tw_user : false,\r\n    tw_user_id : null\r\n    };\r\n\r\n  if(req.session[\"forcedotcom\"]) { logins.fdc_user = true; logins.fdc_user_id = req.session[\"forcedotcom\"][\"id\"].split(\"/\")[5]; }\r\n\r\n    \r\n  return logins;\r\n}\r\n\r\n//configure, route and start express\r\nvar app = express();\r\napp.configure(function() {\r\n  app.use(express.logger());\r\n  app.use(express.cookieParser());\r\n  app.use(express.bodyParser());\r\n  app.use(express.methodOverride());\r\n  app.use(express.session({ secret: 'thissecretrocks' }));\r\n  app.use(express.static(__dirname + '/public'));\r\n  app.use(passport.initialize());\r\n  app.use(passport.session());\r\n  app.use(app.router);\r\n});\r\n\r\napp.set('view engine', 'ejs');\r\napp.set('view options', {\r\n  layout: false,\r\n  open: '{{',\r\n  close: '}}'\r\n});\r\n\r\napp.get('/', \r\n  function(req, res) {\r\n    res.render(\"index\",checkSession(req));\r\n  });\r\n\r\n\r\napp.get('/resttest', \r\n  function(req, res) {\r\n    console.log(req);\r\n      \r\n    res.send({'voll':'toll'});\r\n  }\r\n);\r\n\r\napp.get('/login', passport.authenticate('forcedotcom'));\r\napp.get('/token', \r\n  passport.authenticate('forcedotcom', { failureRedirect: '/error' }),\r\n  function(req, res){\r\n    req.session.forcedotcom = req.session.passport.user;\r\n    console.log(req);\r\n    \r\n    /*\r\n    \r\n    forcedotcom: \r\n      { id: 'https://login.salesforce.com/id/00Di0000000HPIkEAO/005i0000000DktWAAS',\r\n        issued_at: '1359578338919',\r\n        scope: 'id api refresh_token',\r\n        instance_url: 'https://na15.salesforce.com',\r\n        refresh_token: '5Aep861z80Xevi74eX0FQEDY6gJfh16_5lR8IpPkHRcn2LUk8wc9Mz76LrMdHxPs7hLT93.FSqPXg==',\r\n        signature: 'dLYANEe8hFDGL5aOKyIZjr8IsdCXwwy7tUNqx+XIRcQ=',\r\n        access_token: '00Di0000000HPIk!ARIAQF5Z3XjgiC9Mn1mLRH.wlplH1GIrfbt8z9iQUlEgarHHIIFCibZtfkpnOZXJLgX2bbFWkMyCib5esOAoT37qvPLHG5oZ' } }\r\n    \r\n    */\r\n    var conn = new sf.Connection({\r\n      oauth2 : {\r\n        clientId : '3MVG9yZ.WNe6byQCAGhFiyIdi25qzAp6Cj2dUK9lrKM7EnWM8vS6Mh9wo.59a89__lgskSX5excnuf5eD0ixH',\r\n        clientSecret : '4315485479493730266',\r\n        redirectUri : 'https://tsschnoc.koding.com:8443/token',\r\n        loginUrl : \"https://login.salesforce.com\"\r\n      },\r\n      instanceUrl : req.session.forcedotcom.instance_url, //'https://cs13.salesforce.com',\r\n      accessToken : req.session.forcedotcom.access_token, //'00DW0000000IrIr!AR8AQOA8ilUnlDDJzK8fnq_LCMcrivOs5S2_TN86TFyZKTWto4qWiAwMfAqzI_mvYc1LVx2p1SDinskrIWMLCLuXHBlXB59E',\r\n      refreshToken : req.session.forcedotcom.refresh_token //'5Aep861yCOjWzSFTnN1.qYh5UvL_nQnXQ2CZdT_eyvtGaBnHrICy9mtFjunARIwhD3Be6dLz0kkLA=='\r\n    });\r\n    conn.on(\"refresh\", function(accessToken, res) {\r\n        console.log(\"accessToken : \" + accessToken);\r\n        console.log(res);\r\n    });\r\n    \r\n    conn.getIdentity(function(err, meta) {\r\n        console.log('res');\r\n        \r\n        var user = {SFOAuth : req.session.forcedotcom, Identity : meta};\r\n        db.collection('sfOrg', function(err, collection) {\r\n            var qu = {'Identity.organization_id': user.Identity.organization_id};\r\n            console.log('query');\r\n            console.log(qu);\r\n            collection.update(qu, {$set: user}, {safe:true, upsert:true}, \r\n                function(err) {\r\n                    if (err) {\r\n                        console.warn(err.message);\r\n                    }\r\n                    else {\r\n                        console.log('successfully updated');\r\n                        res.send(user);\r\n                    }\r\n                }\r\n            );\r\n        });\r\n        \r\n        \r\n        console.log(err);\r\n        console.log(meta);\r\n    });    \r\n    /*\r\n    db.collection('sipUser', function(err, collection) {\r\n        collection.find().toArray(function(err, items) {\r\n            var itemsToSend = [];\r\n                        \r\n            _.forEach(items, function(item) {\r\n               console.log(item); \r\n               itemsToSend.push(item.sip);\r\n            });\r\n                        \r\n            res.send(itemsToSend);\r\n        });\r\n    });\r\n    */\r\n//    res.render(\"index\",checkSession(req));\r\n  });\r\n\r\n\r\napp.get('/error', function(req, res){\r\n  res.send('An error has occured.');\r\n  });\r\n\r\n\r\nhttps.createServer(ssl_options, app).listen(port, function(){\r\n  console.log(\"Express server listening on port \" + port);\r\n});\r\n\r\n\r\nvar httpport = 8001;\r\nhttp.createServer(app).listen(httpport, function(){\r\n  console.log(\"Express server listening on port (http)\" + httpport);\r\n});\r\n\r\n\r\n\r\nvar mongodb = require('mongodb');\r\nvar db = null;\r\nmongodb.Db.connect('mongodb://nodejitsu:a6c210fe6bc2c929d62073e97d632771@linus.mongohq.com:10067/nodejitsudb7436259011', function(err, db_p) {\r\n    db = db_p;\r\n//    db.collection('sipUser', collectionOpen);\r\n});\r\n"]],"start1":0,"start2":0,"length1":0,"length2":6230}]],"length":6230,"saved":false}
{"ts":1362757891239,"patch":[[{"diffs":[[0,"dir = '."],[-1,"."],[0,"/cert/';"]],"start1":182,"start2":182,"length1":17,"length2":16}]],"length":6229,"saved":false}
{"ts":1362758678175,"patch":[[{"diffs":[[0,";\r\n});\r\n\r\n\r\n"],[1,"//var httpport = 8001;\r\n"],[0,"var httpport"]],"start1":5796,"start2":5796,"length1":24,"length2":48}]],"length":6253,"saved":false}
{"ts":1362758680445,"patch":[[{"diffs":[[0,"ort = 80"],[1,"8"],[0,"0"],[-1,"1"],[0,";\r\nhttp."]],"start1":5841,"start2":5841,"length1":18,"length2":18}]],"length":6253,"saved":false}
{"ts":1362758684951,"patch":[[{"diffs":[[0," });\r\n\r\n"],[1,"/*\r\n"],[0,"\r\nhttps."]],"start1":5666,"start2":5666,"length1":16,"length2":20}]],"length":6257,"saved":false}
{"ts":1362758687415,"patch":[[{"diffs":[[0,"ort);\r\n});\r\n"],[1,"*/"],[0,"\r\n\r\n//var ht"]],"start1":5796,"start2":5796,"length1":24,"length2":26}]],"length":6259,"saved":false}
