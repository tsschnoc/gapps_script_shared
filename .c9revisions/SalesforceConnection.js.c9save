{"ts":1342686678242,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"function SalesforceConnection() {\n  //http://mckoss.com/jscript/object.htm\n  _url = null;\n  _username = null;\n  _password = null;\n  _authinfo = null;\n}\n/**\n * Sets the credentials authentication string\n */\nSalesforceConnection.prototype.setCredentials = \n  function(username, password, url) {\n  this._url = url;\n  this._username = username;\n  this._password = password;\n};\n\nSalesforceConnection.prototype.setAuthDirect = \n  function(serverUrl, sessionId) {\n  var retParam = {};\n  retParam.sessionId = sessionId;\n  retParam.serverUrl = serverUrl;\n  //retParam.metadataServerUrl =; \n  retParam.restServerUrl = retParam.serverUrl.split(\"/\")[2];\n  retParam.restServerUrl = retParam.restServerUrl.replace(\"-api\", \"\");\n  retParam.restServerUrl = \"https://\" + retParam.restServerUrl;\n  this._authinfo = retParam;\n};\n\nSalesforceConnection.prototype.login = \n  function() {\n  try {\n    var param = [\"urn:login\", [\"urn:username\", this._username],\n      [\"urn:password\", this._password]\n    ];\n    var result = this.doPartnerSoapRequest(\n    this._url + '/services/Soap/u/19.0', param);\n    //Logger.log(result.Envelope.Body.loginResponse.result.sessionId.getText());\n    //Logger.log(result.Envelope.Body.loginResponse.result.serverUrl.getText());\n    //  return result.Envelope.Body.loginResponse.result.sessionId.getText();\n    var retParam = {};\n    retParam.sessionId =     \n      result.Envelope.Body.loginResponse.result.sessionId.getText();\n    retParam.serverUrl = \n      result.Envelope.Body.loginResponse.result.serverUrl.getText();\n    retParam.metadataServerUrl = \n      result.Envelope.Body.loginResponse.result.metadataServerUrl.getText();\n    retParam.restServerUrl = retParam.serverUrl.split(\"/\")[2];\n    retParam.restServerUrl = retParam.restServerUrl.replace(\"-api\", \"\");\n    retParam.restServerUrl = \"https://\" + retParam.restServerUrl;\n    this._authinfo = retParam;\n  }\n  catch (err) {\n    throw new Error('Login not possible (check username, password, url)');\n  }\n};\n\nSalesforceConnection.prototype.doPartnerSoapRequest = function(url, body, header) {\n  var req = [\"soapenv:Envelope\",\n  {\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\"\n  }, {\n    \"xmlns:meta\": \"http://soap.sforce.com/2006/04/metadata\"\n  }, {\n    \"xmlns:urn\": \"urn:partner.soap.sforce.com\"\n  }, {\n    \"xmlns:xsi\": \"http://www.w3.org/2001/XMLSchema-instance\"\n  }, [\"soapenv:Header\", header],\n    [\"soapenv:Body\", body]\n  ];\n  //Logger.log(body);\n  //Logger.log(Xml.parseJS(req).toXmlString());\n  var options = {\n    \"method\": \"post\",\n    \"contentType\": \"text/xml;charset=UTF-8\",\n    \"payload\": Xml.parseJS(req).toXmlString(),\n    \"headers\": {\n      SOAPAction: \"\\\"\\\"\"\n    }\n  };\n  var fetchRes = UrlFetchApp.fetch(url, options);\n  //Logger.log(fetchRes.getContentText());\n  //Logger.log(url);\n  var result = Xml.parse(fetchRes.getContentText(), false);\n  return result;\n};\n\nSalesforceConnection.prototype.getObjectFields = function(sf_objectname) {\n  if (this._authinfo == null) {\n    this.login();\n  }\n  //Logger.log(this._authinfo.serverUrl.split(\"/\")[2]);\n  var queryUrl = this._authinfo.restServerUrl + \"/services/data/v20.0/sobjects/\" + encodeURIComponent(sf_objectname) + \"/describe/\";\n  var response = null;\n  try {\n    response = UrlFetchApp.fetch(queryUrl, {\n      method: \"GET\",\n      headers: {\n        \"Authorization\": \"OAuth \" + this._authinfo.sessionId\n      }\n    });\n  }\n  catch (err) {\n    Logger.log(err);\n    this.login();\n    response = UrlFetchApp.fetch(queryUrl, {\n      method: \"GET\",\n      headers: {\n        \"Authorization\": \"OAuth \" + this._authinfo.sessionId\n      }\n    });\n  }\n  //Logger.log(response.getContentText());    \n  var queryResult = Utilities.jsonParse(response.getContentText());\n  return queryResult.fields;\n};\n\nSalesforceConnection.prototype.getObjectFieldList = function(sf_objectname) {\n  fieldNames = [];\n  this.getObjectFields(sf_objectname).forEach(function(field, i) {\n    fieldNames.push(field.name);\n  });\n  return fieldNames;\n};\n\nSalesforceConnection.prototype.readObjectValues = \n  function(sf_objectname, fieldNames, where) {\n  if (this._authinfo == null) {\n    this.login();\n  }\n  var sql = \"SELECT \";\n  for (var i = 0; i < fieldNames.length; i++) {\n    sql = sql + fieldNames[i] + \", \";\n  }\n  sql = sql.substring(0, sql.length - 2);\n  Logger.log(sql);\n  sql = sql + \" from \" + sf_objectname + \" \";\n  if (where != null && where != 'undefined') {\n    sql += ' where ' + where;\n  }\n  Logger.log('SQL to execute:   ' + sql);\n  var queryUrl = \"/services/data/v21.0/query?q=\" + encodeURIComponent(sql);\n  var records = [];\n  while (queryUrl != null && queryUrl != 'undefined') {\n    var response = UrlFetchApp.fetch(\n    this._authinfo.restServerUrl + queryUrl, {\n      method: \"GET\",\n      headers: {\n        \"Authorization\": \"OAuth \" + this._authinfo.sessionId\n      }\n    });\n//Logger.log(   response.getContentText()); \n    var queryResult = Utilities.jsonParse(response.getContentText());\n    queryResult.records.forEach(function(record, i) {\n      records.push(record);\n    });    \n    \n    queryUrl = queryResult.nextRecordsUrl;\n    Logger.log(\"!!!!!!!!!!!!!!!!!!!!!!\" + queryUrl);\n  }\n  return records;\n};\n\nSalesforceConnection.prototype.query = function(soql) {\n  if (this._authinfo == null) {\n    this.login();\n  }\n  Logger.log('SQL to execute:   ' + soql);\n  var queryUrl = \"/services/data/v21.0/query?q=\" + encodeURIComponent(soql);\n  var records = [];\n  while (queryUrl != null && queryUrl != 'undefined') {\n    var response = UrlFetchApp.fetch(\n    this._authinfo.restServerUrl + queryUrl, {\n      method: \"GET\",\n      headers: {\n        \"Authorization\": \"OAuth \" + this._authinfo.sessionId\n      }\n    });\n//Logger.log(   response.getContentText()); \n    var queryResult = Utilities.jsonParse(response.getContentText());\n    queryResult.records.forEach(function(record, i) {\n      records.push(record);\n    });    \n    \n    queryUrl = queryResult.nextRecordsUrl;\n    Logger.log(\"!!!!!!!!!!!!!!!!!!!!!!\" + queryUrl);\n  }\n  return records;\n};\n\n\nfunction flachmachen(pre, record, obj) {\n    for (f in record) {\n      if (typeof record[f] == 'object') {\n         flachmachen(f + '.', record[f], obj);              \n      } else {\n        obj[pre+f] = record[f];\n      }      \n    }    \n}\n\n\n\nSalesforceConnection.prototype.queryFlat = function(soql) {\n  var records = this.query(soql);\n  var objs = [];\n  var keys = [];\n  \n  for (row in records) {\n    var record = records[row];\n//    Logger.log(record);\n    var obj = {};\n    flachmachen('', record, obj)\n    Logger.log(obj);\n    objs.push(obj);\n    for(var key in obj){\n      if (keys.indexOf(key) < 0)\n        keys.push(key);\n    }    \n  }\n  \n  Logger.log(keys);  \n  \n  \n  var values = [];\n  for (i in objs) {\n    obj = objs[i];\n    Logger.log('XX' + obj);  \n    var row = [];\n    for (j in keys) {\n      row.push(obj[keys[j]]);\n    }\n    values.push(row);\n  }\n  \n  var retObj = {};\n  retObj.keys =keys;\n  retObj.values =values;\n  return retObj;\n  \n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSalesforceConnection.prototype.readObjectValueList = \n  function(sf_objectname, fieldNames, where) {\n  var lines = [];\n  // Render result records into cells\n  this.readObjectValues(sf_objectname, fieldNames, where).forEach(\n    function(record, i) {\n//Logger.log(record);      \n    var line = [];\n    \n    for (var j in fieldNames) {\n//Logger.log(fieldNames[j]);      \n      line.push(getValueInSobject(record, fieldNames[j]));\n    }\n    lines.push(line);\n  });\n  return lines;\n};\n\nSalesforceConnection.prototype.readObjects = function() {\n  if (this._authinfo === null) {\n    this.login();\n  }\n  var queryUrl = \"/services/data/v20.0/sobjects/\";\n  var response = UrlFetchApp.fetch(\n  this._authinfo.restServerUrl + queryUrl, {\n    method: \"GET\",\n    headers: {\n      \"Authorization\": \"OAuth \" + this._authinfo.sessionId\n    }\n  });\n  Logger.log(response.getContentText());\n  var queryResult = Utilities.jsonParse(response.getContentText());\n  return queryResult.sobjects;\n};\n\nSalesforceConnection.prototype.insertSObject = \n  function(sf_objectname, insertSObject) {\n  if (this._authinfo == null) {\n    this.login();\n  }\n  var queryUrl = this._authinfo.restServerUrl + \n    \"/services/data/v20.0/sobjects/\" + encodeURIComponent(sf_objectname) + \"/\";\n  var payload = JSON.stringify(stmt);\n  Logger.log(\"payload: \\n\" + payload);\n  var response = UrlFetchApp.fetch(queryUrl, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": \"OAuth \" + this._authinfo.sessionId,\n      \"ContentType\": \"application/json; charset=utf-8\"\n    },\n    contentType: \"application/json; charset=utf-8\",\n    payload: payload\n  });\n  var queryResult = Utilities.jsonParse(response.getContentText());\n  Logger.log(queryResult);\n};\n\n\nSalesforceConnection.prototype.insertToSf = \n  function(sf_objectname, fieldNames, records) {\n  \n  if (this._authinfo == null) {\n    this.login();\n  }\n  var stmts = [];\n  Logger.log(fieldNames);\n  records.forEach(function(record, i) {\n    var stmt = {};\n    record.forEach(function(value, j) {\n        insertToSObject(stmt, fieldNames[j], value);\n    });\n    Logger.log(\"JSON: \" + JSON.stringify(stmt));\n    stmts.push(stmt);\n  });\n  var queryUrl = \n    this._authinfo.restServerUrl + \"/services/data/v20.0/sobjects/\"  + encodeURIComponent(sf_objectname) + \"/\";\n  var sessionId = this._authinfo.sessionId;\n  stmts.forEach(function(stmt, j) {\n    var ct = \"application/json;charset=ISO-8859-1\";\nLogger.log(\"ct: \\n\" + ct);\n    var payload = JSON.stringify(stmt);\nLogger.log(\"queryUrl: \\n\" + queryUrl);\n// queryUrl='http://preview.parxwerk.ch:9292/testtesttest';\n//Logger.log(\"queryUrl: \\n\" + queryUrl);\n    Logger.log(\"Authorization: \\n\" + \"OAuth \" + sessionId);\n    Logger.log(\"ContentType: \\n\" + \"application/json; charset=utf-8\");\n    Logger.log(\"payload: \\n\" + payload);\n    var response = UrlFetchApp.fetch(queryUrl,\n    {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"OAuth \" + sessionId,\n        \"Content-Type\": ct\n      },\n      contentType: ct,\n      payload: payload\n    });\n    var queryResult = Utilities.jsonParse(response.getContentText());\n    Logger.log(queryResult);\n  });\n};\n\n\nSalesforceConnection.prototype.updateSfFromFields = \n  function(sf_objectname, fieldNames, records) {\n  \n  if (this._authinfo == null) {\n    this.login();\n  }\n  var stmts = [];\n  Logger.log(fieldNames);\n  records.forEach(function(record, i) {\n    var stmt = {};\n    record.forEach(function(value, j) {\n        insertToSObject(stmt, fieldNames[j], value);\n    });\n    Logger.log(\"JSON: \" + JSON.stringify(stmt));\n    stmts.push(stmt);\n  });\n  var queryUrl = \n    this._authinfo.restServerUrl + \"/services/data/v20.0/sobjects/\"  + encodeURIComponent(sf_objectname) + \"/\";\n  var sessionId = this._authinfo.sessionId;\n  stmts.forEach(function(stmt, j) {\n    var id = stmt.Id;\n    delete stmt.Id;\n    Logger.log(stmt);\n    var ct = \"application/json;charset=ISO-8859-1\";\n    \n    var payload = JSON.stringify(stmt);\n    \n    \n    Logger.log(\"Authorization: \\n\" + \"OAuth \" + sessionId);\n    Logger.log(\"ContentType: \\n\" + \"application/json; charset=utf-8\");\n    Logger.log(\"payload: \\n\" + payload);\n    Logger.log(\"queryUrl+ id: \\n\" + queryUrl+ id);\n    var response = UrlFetchApp.fetch(queryUrl+ id+ \"?_HttpMethod=PATCH\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"OAuth \" + sessionId,\n        \"Content-Type\": ct\n      },\n      contentType: ct,\n      payload: payload\n    });\n    var queryResult = Utilities.jsonParse(response.getContentText());\n    Logger.log(queryResult);\n  });\n};\n\n\n\n\n\nSalesforceConnection.prototype.updateSfRecord = \n  function(sf_objectname, fieldNames, records) {\n  \n  if (this._authinfo == null) {\n    this.login();\n  }\n  var stmts = [];\n  Logger.log(fieldNames);\n  records.forEach(function(record, i) {\n    var stmt = {};\n    record.forEach(function(value, j) {\n        insertToSObject(stmt, fieldNames[j], stringvalue);\n    });\n    Logger.log(\"JSON: \" + JSON.stringify(stmt));\n    stmts.push(stmt);\n  });\n  var queryUrl = \n    this._authinfo.restServerUrl + \"/services/data/v20.0/sobjects/\"  + encodeURIComponent(sf_objectname) + \"/\";\n  var sessionId = this._authinfo.sessionId;\n  stmts.forEach(function(stmt, j) {\n    var payload = JSON.stringify(stmt);\n    Logger.log(\"payload: \\n\" + payload);\n    var response = UrlFetchApp.fetch(queryUrl+stmt.Id, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"OAuth \" + sessionId\n      },\n      contentType: \"application/json\",\n      payload: payload\n    });\n    var queryResult = Utilities.jsonParse(response.getContentText());\n    Logger.log(queryResult);\n  });\n};\n\n\n\nSalesforceConnection.prototype.doSoapRequest = \n  function(url, body, header) {\n  \n  var req = [ \"soapenv:Envelope\",\n             { \"xmlns:soapenv\" : \"http://schemas.xmlsoap.org/soap/envelope/\" }, { \"xmlns:meta\" : \"http://soap.sforce.com/2006/04/metadata\" }, { \"xmlns:urn\" : \"urn:partner.soap.sforce.com\" }, { \"xmlns:xsi\" : \"http://www.w3.org/2001/XMLSchema-instance\" },\n             [ \"soapenv:Header\", header ],\n             [ \"soapenv:Body\", body ]\n            ]; \n  \n  Logger.log(body);\n  Logger.log(Xml.parseJS(req).toXmlString());\n  \n  var options =\n      {\n        \"method\" : \"post\",\n        \"contentType\" : \"text/xml;charset=UTF-8\",\n        \"payload\" : Xml.parseJS(req).toXmlString(),\n        \"headers\" : {SOAPAction : \"\\\"\\\"\"}\n      };\n  \n  var fetchRes = UrlFetchApp.fetch(url, options);  \n  Logger.log(fetchRes.getContentText());\n  Logger.log(url);\n  \n  var result = Xml.parse(fetchRes.getContentText(), false);\n  \n  return result;\n};\n\n\nSalesforceConnection.prototype.doSoapMetaRequest = function(body) {\n\n  if (this._authinfo == null) {\n    this.login();\n  }\n\n  var meta_header = [\"meta:SessionHeader\", [\"meta:sessionId\", this._authinfo.sessionId]];\n\n  return this.doSoapRequest(this._authinfo.metadataServerUrl, body, meta_header);\n};\n\nSalesforceConnection.prototype.doSoapUrnRequest = function(body) {\n\n  if (this._authinfo == null) {\n    this.login();\n  }\n\n  var urn_header = [\"urn:SessionHeader\", [\"urn:sessionId\", this._authinfo.sessionId]];\n\n  return this.doSoapRequest(this._authinfo.serverUrl, body, urn_header);\n};\n\nSalesforceConnection.prototype.metaUpdateField = function(sObjectName, field) {\n  var metadata = [ \"meta:metadata\",\n                  { \"xsi:type\" : \"meta:CustomField\" }\n                 ];     \n                  \n  for (var i in field) {\n    if (i == \"fullName\") {\n      metadata.push([i,sObjectName + \".\" + field[i]]);\n    } else {\n      metadata.push([i,field[i]]);\n    }\n  }\n    \n  \n  var UpdateMetadata = [ \"UpdateMetadata\",\n                        [\"currentName\", sObjectName + \".\" + field.fullName],\n                        metadata\n                       ];  \n  \n  var param = [ \"update\",\n           { \"xmlns\" : \"http://soap.sforce.com/2006/04/metadata\" },\n           UpdateMetadata \n          ];\n  \n  var result = this.doSoapMetaRequest(param );\n  Logger.log(result);\n  return result;\n\n};\n\n\n\nSalesforceConnection.prototype.metaRetrieveObjectFields = function(sObjectName, field) {\n  var param = [ \"meta:retrieve\",\n               [ \"meta:retrieveRequest\", \n                [ \"meta:apiVersion\", \"24\"], \n                [ \"meta:singlePackage\", \"false\"], \n                [ \"meta:unpackaged\", \n                 [ \"meta:version\", \"24\"],\n                 [ \"meta:types\", \n                  [ \"meta:members\", sObjectName],\n                  [ \"meta:name\", \"CustomObject\"]\n                 ]                      \n                ]\n               ]\n              ];\n  \n  var result = this.doSoapMetaRequest(param );\n  \n  var responseId = result.Envelope.Body.retrieveResponse.result.id.getText();\n  \n  \n  var param = [ \"meta:checkStatus\",\n               [ \"meta:asyncProcessId\", responseId ]\n              ];\n  \n  \n  var done = \"false\";\n  while (done == \"false\") {  \n    var result = this.doSoapMetaRequest(param );\n    done = result.Envelope.Body.checkStatusResponse.result.done.getText();\n    Logger.log( done );\n  }\n\n\n\n  \n  \n  var param = [ \"meta:checkRetrieveStatus\",\n               [ \"meta:asyncProcessId\", responseId ]\n              ];\n  \n  var result = this.doSoapMetaRequest(param );\n  \n  \n  \n  Logger.log(result.Envelope.Body.checkRetrieveStatusResponse.result.zipFile.getText());   \n  \n  \n\n  var blob = Utilities.newBlob(Utilities.base64Decode(result.Envelope.Body.checkRetrieveStatusResponse.result.zipFile.getText()));\n  blob.setContentType(\"application/zip\");\n  Logger.log(blob);\n\n  Logger.log(blob.getContentType());\n  var unzippedBlobs = Utilities.unzip(blob);\n  Logger.log(unzippedBlobs[0].getName());\n//  Logger.log(unzippedBlobs[0].getDataAsString());\n\n  \n  var sObjectXML = Xml.parse(unzippedBlobs[0].getDataAsString(), false);  \n  \n  \n  var headers = [ 'fullName', 'externalId', 'label', 'picklist', 'trackHistory', 'type', 'referenceTo', 'relationshipName', 'required', 'formula', 'formulaTreatBlanksAs', 'unique', 'description', 'defaultValue', 'visibleLines', 'precision', 'scale', 'relationshipOrder', 'writeRequiresMasterRead', 'length', 'caseSensitive', 'relationshipLabel', 'inlineHelpText'];\n  var records;\n    \n  records = sObjectXML.CustomObject.fields;\n  \n  var values = [];\n  \n  for (var i = 0; i < records.length; i++) {\n    var record = records[i];\n    \n    var obj = {};\n    \n    var attrs = records[i].getElements();\n    \n    for (var j = 0; j < attrs.length; j++) {\n      var att = attrs[j];\n      var locName = att.getName().getLocalName();\n      Logger.log(locName);\n\n      if (locName == 'picklist') {\n        if (att.picklistValues) {\n          obj[locName] = '';\n          var pValues = att.picklistValues;\n        Logger.log(att.toXmlString());\n          for (var k = 0; k < pValues.length; k++) {\n            Logger.log(\" fsdf \" + pValues[k].fullName.getText());\n            obj[locName] += pValues[k].fullName.getText() + \",\";\n          }\n        }\n      } else {\n        obj[locName] = att.getText();\n      }\n      \n      \n    }\n    values.push(obj);\n  }  \n  return values;\n\n\n\n};\n\n\n\n\n\n\n\n\n\n\nfunction insertToSObject(sObject, fieldName, value) {\n  var name_comp = fieldName.split(\".\");\n  var val = null;\n  for (i = name_comp.length - 1; i >= 0; i--) {\n    if (val === null) {\n      val = {};\n      val[name_comp[i]] = value;\n    }\n    else {\n      var newVal = {};\n      newVal[name_comp[i]] = val;\n      val = newVal;\n    }\n    Logger.log(val);\n  }\n  MergeObjectsRecursive(sObject, val);\n}\n\n\nfunction getValueInSobject(sobject, fieldNames) {\n  var val = sobject;\n  fieldNames.split(\".\").forEach(function(name, i) {\n    val = val[name];\n  });\n  return val;\n}\n\n\n\n\n\nfunction MergeObjectsRecursive(obj1, obj2) {\n  for (var p in obj2) {\n    try {\n      // Property in destination object set; update its value.\n      if (obj2[p].constructor == Object) {\n        obj1[p] = MergeRecursive(obj1[p], obj2[p]);\n      }\n      else {\n        obj1[p] = obj2[p];\n      }\n    }\n    catch (e) {\n      // Property in destination object not set; create it and set its value.\n      obj1[p] = obj2[p];\n    }\n  }\n  return obj1;\n}"]],"start1":0,"start2":0,"length1":0,"length2":18966}]],"length":18966}
