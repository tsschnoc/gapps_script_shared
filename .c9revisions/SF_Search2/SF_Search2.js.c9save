{"ts":1355848487842,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var sf_version = '23.0';\nvar apikey = 'AIzaSyA9r8BLyijx8Wng-Ow1zG8AZ5-FHEoGZ8Q';\n\n\nvar consumerKey = null;\nvar consumerSecret = null;\n\nvar SF_RequestToken = null;\n\nvar oauth2_callbackurl = 'https://s3.amazonaws.com/tsschnocwinn/oAuthcallback.html';\nvar oAuthToken = null;\nvar oauth2_identity = null;\n\nvar responseFunc;\nvar searchTerm;\n  \n\n// Call fetchData() when gadget loads.\ngadgets.util.registerOnLoadHandler(initGadget);\n\nfunction makeCachedRequest(url, callback, params, refreshInterval) {\n  var ts = new Date().getTime();\n  var sep = \"?\";\n  if (refreshInterval && refreshInterval > 0) {\n    ts = Math.floor(ts / (refreshInterval * 1000));\n  }\n  if (url.indexOf(\"?\") > -1) {\n    sep = \"&\";\n  }\n  url = [url, sep, \"nocache=\", ts].join(\"\");\n  gadgets.io.makeRequest(url, callback, params, 0);\n}\n\nfunction initGadget() {\n  window.addEventListener('message', popupMessageReceiver, false);\n\n  google.load(\"jquery\", \"1.7.1\");\n  google.load(\"jqueryui\", \"1.8.17\");\n\n  google.setOnLoadCallback(function() {\n    fetchData();\n  });\n}\n\n\n\nfunction initSearchGui() {\n  jQuery(\"#search\").autocomplete({\n    source: function(request, response) {\n      responseFunc = response;\n      searchTerm = request;\n      sf_search();\n    },\n    minLength: 2,\n    select: function(event, ui) {\n      log(ui.item ? \"Selected: \" + ui.item.label : \"Nothing selected, input was \" + this.value);\n    },\n    open: function() {\n      $(this).removeClass(\"ui-corner-all\").addClass(\"ui-corner-top\");\n    },\n    close: function() {\n      $(this).removeClass(\"ui-corner-top\").addClass(\"ui-corner-all\");\n    }\n  });\n}\n\n\n\n\n\n\n////////////////////////////////////\n////////////////////////////////////\n//    var responseFunc;\n//    var searchTerm;\n////////////////////////////////////\n  function sf_search() {\n    var queryString = \"FIND {*\" + searchTerm.term +\"*} RETURNING Case(Id, Description, Subject, CaseNumber)  \";\n    var callUrl = oauth2_identity.urls.rest + \"search/?q=\" + encodeURIComponent(queryString);\n//console.log(\"!!!!!!!!!!!!!!!!!! callUrl :\" + callUrl);  \n    \n    var params = {};\n    params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;\n    params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;\n    //params[gadgets.io.RequestParameters.POST_DATA] = postdata;\n    params[gadgets.io.RequestParameters.HEADERS] = {\n      \"Authorization\": \"OAuth \" + oAuthToken.access_token,\n      \"X-PrettyPrint\": \"1\"\n    };\n        \n    var callback = function(obj) {        \n      if (obj.data == null) {\n        responseFunc([]);\n        return;\n      }\n      var arr = [];\n      for (var i=0;i<obj.data.length;i++)  {\n        var record = obj.data[i];\n        \n        arr.push({label:record.Subject, value:record.Id});\n      }\n      \n//      responseFunc([{label:\"hallo\",value:\"depp\"},{label:\"hallo\",value:\"depp\"},{label:\"hallo\",value:\"depp\"}]);\n      responseFunc(arr);\n    };\n        \n        \n    gadgets.io.makeRequest(callUrl, callback, params);\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction showOnly(id) {\n  jQuery('#main').hide();\n  jQuery('#approval').hide();\n  jQuery('#waiting').hide();\n  jQuery('#loading').hide();\n  jQuery('#errors').hide();\n\n  jQuery('#' + id).show();\n}\n\nfunction debug(text) {\n  if (true) {\n    if (console && console.debug) {\n      console.debug(text);\n    }\n  }\n}\n\n\nfunction fetchData() {\n  jQuery('#errors').hide();\n\n  var params = {};\n  url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList?minAccessRole=owner&pp=1&key=' + apikey;\n\n  params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;\n  params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.OAUTH;\n  params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = \"google\";\n  params[gadgets.io.RequestParameters.OAUTH_USE_TOKEN] = \"always\";\n  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;\n\n  var callback = function(response) {\n      if (response.oauthApprovalUrl) {\n        // You can set the sign in link directly:\n        // jQuery('#personalize').get(0).href = response.oauthApprovalUrl\n        // OR use the popup.js handler\n        var popup = shindig.oauth.popup({\n          destination: response.oauthApprovalUrl,\n          windowOptions: 'height=600,width=800',\n          onOpen: function() {\n            showOnly('waiting');\n          },\n          onClose: function() {\n            showOnly('loading');\n            fetchData();\n          }\n        });\n        jQuery('#personalize').get(0).onclick = popup.createOpenerOnClick();\n        jQuery('#approvalLink').get(0).onclick = popup.createApprovedOnClick();\n\n        showOnly('approval');\n      }\n\n      else if (response.data) {\n        showOnly('main');\n        for (i in response.data.items) {\n          var c = response.data.items[i];\n          if (c.summary == 'Timecards' || c.summary == 'TimeCards') {\n            consumerKey = c.description.split('/')[0];\n            consumerSecret = c.description.split('/')[1];\n            timeticket_calendarId = c.id;\n          }\n        }\n\n        initialize_sf_oauth();\n      }\n\n      else {\n        jQuery('#errors').html('Something went wrong').fadeIn();\n        showOnly('errors');\n      }\n\n\n      };\n\n\n  gadgets.io.makeRequest(url, callback, params);\n\n}\n\n\n\n\n\n\n\n\n// SF Oauth dance\n\nfunction initialize_sf_oauth() {\n  var prefs = new gadgets.Prefs();\n  var refresh_token = prefs.getString(\"refresh_token\");\n\n  if (refresh_token && refresh_token != '') {\n    oAuthToken = {};\n    oAuthToken.refresh_token = refresh_token;\n    oauth_refresh();\n    return;\n  }\n\n  var oauthApprovalUrl = 'https://login.salesforce.com/services/oauth2/authorize?response_type=code' + '&client_id=' + encodeURIComponent(consumerKey) + '&redirect_uri=' + encodeURIComponent(oauth2_callbackurl) + '&state=mystate';\n  var popup = shindig.oauth.popup({\n    destination: oauthApprovalUrl,\n    windowOptions: 'height=600,width=800',\n    onOpen: function() {\n      showOnly('waiting');\n    },\n    onClose: function() {\n      showOnly('loading');\n    }\n  });\n  $('#personalize').get(0).onclick = popup.createOpenerOnClick();\n  $('#personalize').text('Authorize Salesforce');\n  $('#approvalLink').get(0).onclick = popup.createApprovedOnClick();\n  showOnly('approval');\n}\n\n\nfunction oauth2_callback(response) {\n  debug(response.data);\n  oAuthToken = response.data;\n\n  if (response.rc != 200) {\n    // auth fehler, refreshtoken lÃ¶schen und nochmal approven lassen        \n    var prefs = new gadgets.Prefs();\n    prefs.set(\"refresh_token\", null);\n    initialize_sf_oauth();\n    return;\n  }\n\n\n  if (oAuthToken.refresh_token) {\n    var prefs = new gadgets.Prefs();\n    prefs.set(\"refresh_token\", oAuthToken.refresh_token);\n  }\n\n\n  var params = {};\n  params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;\n  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;\n  params[gadgets.io.RequestParameters.HEADERS] = {\n    \"Accept\": \"application/json\",\n    \"X-PrettyPrint\": \"1\",\n    \"Authorization\": \"OAuth \" + oAuthToken.access_token\n  };\n\n\n  var identity_callback = function(response) {\n      debug(response.data);\n      oauth2_identity = response.data;\n      for (i in oauth2_identity.urls) {\n        oauth2_identity.urls[i] = oauth2_identity.urls[i].replace(\"{version}\", sf_version);\n      }\n      showOnly('main');\n      gadgets.window.adjustHeight();\n\n\n      initSearchGui();\n\n      };\n\n  makeCachedRequest(oAuthToken.id, identity_callback, params);\n\n}\n\nfunction oauth_refresh() {\n  var postdata = 'grant_type=refresh_token&' + 'client_id=' + encodeURIComponent(consumerKey) + '&client_secret=' + encodeURIComponent(consumerSecret) + '&refresh_token=' + encodeURIComponent(oAuthToken.refresh_token) + '&format=json';\n\n  var params = {};\n  params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;\n  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;\n  params[gadgets.io.RequestParameters.POST_DATA] = postdata;\n  params[gadgets.io.RequestParameters.HEADERS] = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    \"X-PrettyPrint\": \"1\"\n  };\n\n  makeCachedRequest('https://login.salesforce.com/services/oauth2/token', oauth2_callback, params);\n}\n\n\n\nfunction popupMessageReceiver(event) {\n  //this function is called by the popup when it opens the oauth-callback-page and passed the loaded url back\n  //alert ('Message received: ' + event.origin + ' : '  + event.data);\n  if (SF_RequestToken === null) SF_RequestToken = {};\n\n  if (event.origin == 'https://s3.amazonaws.com') {\n    var pairs = event.data.split('?')[1].split('&');\n    for (var i in pairs) {\n      var kv = pairs[i].split('=');\n      SF_RequestToken[kv[0]] = decodeURIComponent(kv[1]);\n    }\n\n    debug(SF_RequestToken);\n\n    var postdata = 'grant_type=authorization_code&' + 'code=' + encodeURIComponent(SF_RequestToken.code) + '&client_id=' + encodeURIComponent(consumerKey) + '&client_secret=' + encodeURIComponent(consumerSecret) + '&redirect_uri=' + encodeURIComponent(oauth2_callbackurl) + '&state=gettoken&format=json';\n\n    var params = {};\n    params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;\n    params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;\n    params[gadgets.io.RequestParameters.POST_DATA] = postdata;\n    params[gadgets.io.RequestParameters.HEADERS] = {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"X-PrettyPrint\": \"1\"\n    };\n\n    makeCachedRequest('https://login.salesforce.com/services/oauth2/token', oauth2_callback, params);\n  }\n}\n\n// end: SF Oauth dane"]],"start1":0,"start2":0,"length1":0,"length2":9570}]],"length":9570}
