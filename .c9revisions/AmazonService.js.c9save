{"ts":1349872207554,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"AmazonService = {\n  _ACCESS_KEY_ID : null,\n  _SECRET_ACCESS_KEY : null,\n  _authinfo : null,\n\n  /**\n   * Sets the credentials authentication string\n   */\n  setCredentials : function(ACCESS_KEY_ID, SECRET_ACCESS_KEY) {\n    this._ACCESS_KEY_ID = ACCESS_KEY_ID;\n    this._SECRET_ACCESS_KEY = SECRET_ACCESS_KEY;\n  },\n\n  \n  sendMail : function(sourceAddress, toAddress, subject, body) {\n    var timeStamp = Utilities.formatDate(\n      new Date(), \n      \"GMT\", \"EEE, dd MMM yyyy HH:mm:ss\");\n      \n    timeStamp = timeStamp + ' GMT';\n    var step1 = Utilities.computeHmacSha256Signature(\n      timeStamp, this._SECRET_ACCESS_KEY);\n    var sig = Utilities.base64Encode(step1);\n    Logger.log(timeStamp);\n    var auth = 'AWS3-HTTPS AWSAccessKeyId=' + this._ACCESS_KEY_ID + \n      ',Algorithm=HMACSHA256,Signature=' + sig;\n    Logger.log(auth);\n   \n    var url =\n      'https://email.us-east-1.amazonaws.com/?Action=SendEmail&Source=' +    \n      encodeURIComponent(sourceAddress) + \n      '&Destination.ToAddresses.member.1=' +\n      encodeURIComponent(toAddress) + \n      '&Message.Subject.Data=' +\n      encodeURIComponent(subject) + \n      '&Message.Body.Text.Data=' +\n      encodeURIComponent(body) + \n      '';\n \n    Logger.log(url);\n    var response = UrlFetchApp.fetch(url, {\n      method: 'get',\n      headers: {\n        'X-Amzn-Authorization': auth,\n        Date: timeStamp\n      },\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\"\n    });\n    Logger.log(response.getContentText());\n  },\n\n  amazonSearch: function(searchIndex, keyWord) {\n    var timeStamp = Utilities.formatDate(new Date(), \"GMT\",\n      \"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n    var valueForSignature = \"ItemSearch\" + timeStamp;\n    var step1 = Utilities.computeHmacSha256Signature(valueForSignature,\n      this._SECRET_ACCESS_KEY);\n    var sig = Utilities.base64Encode(step1);\n    var param = [\"ItemSearch\", [\"AWSAccessKeyId\", this._ACCESS_KEY_ID],\n      [\"Signature\", sig],\n      [\"Timestamp\", timeStamp],\n      [\"Request\", [\"SearchIndex\", searchIndex],\n        [\"Keywords\", keyWord]\n      ]\n    ];\n    var wsdl = SoapService.wsdl(\n      \"http://webservices.amazon.com/AWSECommerceService/\" +\n      \"AWSECommerceService.wsdl\");\n    var awseService = wsdl.getService(\"AWSECommerceService\");\n    var result = awseService.ItemSearch(param);\n    var list = result.Envelope.Body.ItemSearchResponse.Items.Item;\n    var items = [];\n    for (var i = 0; i < list.length; i++) {\n      item = {};\n      item.Title = list[i].ItemAttributes.Title.getText();\n      item.Manufacturer = list[i].ItemAttributes.Manufacturer.getText();\n      item.DetailPageURL = list[i].DetailPageURL.getText();\n      items.push(item);\n    }\n    return items;\n  },\n  \n  \n  signParams : function(HTTPVerb, ValueOfHostHeaderInLowercase,\n      HTTPRequestURI, queryStrings) {\n    var toSign = \n      HTTPVerb + \"\\n\" + \n      ValueOfHostHeaderInLowercase + \"\\n\" + \n      HTTPRequestURI + \"\\n\";\n    var timeStamp = \n      Utilities.formatDate(new Date(), \"GMT\", \"yyyy-MM-dd'T'HH:mm:ss.000'Z'\");\n    \n    queryStrings.push({\n      key: \"SignatureMethod\",\n      value: \"HmacSHA256\"\n    });\n    queryStrings.push({\n      key: \"SignatureVersion\",\n      value: \"2\"\n    });\n    queryStrings.push({\n      key: \"Timestamp\",\n      value: encodeURIComponent(timeStamp)\n    });\n    queryStrings.push({\n      key: \"AWSAccessKeyId\",\n      value: encodeURIComponent(this._ACCESS_KEY_ID)\n    });\n    queryStrings.sort(function(a, b) {\n      if (a.key < b.key) {\n        return -1;\n      }\n      if (a.key < b.key) {\n        return 1;\n      }\n      return 0;\n    });\n    queryStrings.forEach(function(queryString, i) {\n      toSign += queryString.key + \"=\" + queryString.value + \"&\";\n    });\n    toSign = toSign.substr(0, toSign.length - 1);\n    Logger.log(toSign);\n    var step1 = Utilities.computeHmacSha256Signature(\n    toSign, this._SECRET_ACCESS_KEY);\n    var sig = Utilities.base64Encode(step1);\n    var signedParams = '?';\n    queryStrings.push({\n      key: \"Signature\",\n      value: encodeURIComponent(sig)\n    });\n    queryStrings.sort(function(a, b) {\n      if (a.key < b.key) {\n        return -1;\n      }\n      if (a.key < b.key) {\n        return 1;\n      }\n      return 0;\n    });\n    queryStrings.forEach(function(queryString, i) {\n      signedParams += queryString.key + \"=\" + queryString.value + \"&\";\n    });\n    signedParams = signedParams.substr(0, signedParams.length - 1);\n    Logger.log(signedParams);\n    return signedParams;\n  },\n  \n  \n  \n  dump : ''\n};"]],"start1":0,"start2":0,"length1":0,"length2":4503}]],"length":4503}
