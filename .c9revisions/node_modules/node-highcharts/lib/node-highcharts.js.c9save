{"ts":1340651278598,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var jsdom = require('jsdom'),\n\tspawn\t= require('child_process').spawn;\n\nfunction createHighchartsWindow(callback) {\n\tvar window \t= jsdom.jsdom().createWindow(),\n\t\tscript\t= window.document.createElement('script');\n\t\n\t// Convince Highcharts that our window supports SVG's\n\twindow.SVGAngle = true;\n\t\n\t// jsdom doesn't yet support createElementNS, so just fake it up\n\twindow.document.createElementNS = function(ns, tagName) {\n\t\tvar elem = window.document.createElement(tagName);\t\n\t\telem.getBBox = function() {\n\t\t\treturn {\n\t\t\t\tx: elem.offsetLeft,\n\t\t\t\ty: elem.offsetTop,\n\t\t\t\twidth: elem.offsetWidth,\n\t\t\t\theight: elem.offsetHeight\n\t\t\t};\n\t\t};\n\t\treturn elem;\n\t};\n\t\n\t// Load scripts\n\tjsdom.jQueryify(window, 'http://code.jquery.com/jquery-1.4.2.min.js', function(w,jq) {\n\t\tvar filename = 'file:///' + __dirname + '/highcharts/highcharts.src.js';\n\t\tscript.src = filename;\n\t\tscript.onload = function() {\n\t\t\tcallback(window);\n\t\t}\n\t\twindow.document.body.appendChild(script);\n\t});\n}\n\nfunction serverifyOptions(options) {\n\t\toptions.chart.renderTo = 'container';\n\t\toptions.chart.renderer = 'SVG';\n\t\toptions.chart.animation = false;\n\t\toptions.series.forEach(function(series) {\n\t\t\tseries.animation = false;\n\t\t});\n}\n\nfunction render(options, callback) {\n\tcreateHighchartsWindow(function(window) {\n\t\ttry {\n\t\t\tvar $\t= window.jQuery,\n\t\t\t\tHighcharts \t= window.Highcharts,\n\t\t\t\tdocument\t= window.document,\n\t\t\t\t$container\t= $('<div id=\"container\" />'),\n\t\t\t\tchart, svg, convert, buffer;\n\n\t\t\t$container.appendTo(document.body);\n\n\t\t\tserverifyOptions(options);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tchart = new Highcharts.Chart(options);\n\t\t\t} catch (e) {\n\t\t\t\tcallback(e, null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsvg = $container.children().html();\n\t\t\t// Start convert\n\t\t\tconvert\t= spawn('convert', ['svg:-', 'png:-']);\n\n\t\t\t// Pump in the svg content\n\t\t\tconvert.stdin.write(svg);\n\t\t\tconvert.stdin.end();\n\t\t\t\n\t\t\t// Write the output of convert straight to the response\n\t\t\tconvert.stdout.on('data', function(data) {\n\t\t\t\ttry {\n\t\t\t\t\tvar prevBufferLength = (buffer ? buffer.length : 0),\n\t\t\t\t\t\tnewBuffer = new Buffer(prevBufferLength + data.length);\n\t\t\t\t\t\t\n\t\t\t\t\tif (buffer) {\n\t\t\t\t\t\tbuffer.copy(newBuffer, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tdata.copy(newBuffer, prevBufferLength, 0);\n\t\t\t\t\t\n\t\t\t\t\tbuffer = newBuffer;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tcallback(err, null);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// When we're done, we're done\n\t\t\tconvert.on('exit', function(code) {\n\t\t\t\tcallback(null, buffer);\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tcallback(err, null);\n\t\t}\n\t});\n}\n\nexports.render = render;\n"]],"start1":0,"start2":0,"length1":0,"length2":2481}]],"length":2481}
