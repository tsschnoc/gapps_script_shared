{"ts":1359577773878,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var util   = require('util')\n  , events = require('events')\n  , _      = require('underscore')._\n  ;\n\n/**\n * Query\n */\nvar Query = module.exports = function(conn, soql, locator) {\n  this._conn = conn;\n  this._soql = soql;\n  if (locator && locator.indexOf(\"/\") >= 0) {\n    locator = locator.split(\"/\").pop();\n  }\n  this._locator = locator;\n};\n\nutil.inherits(Query, events.EventEmitter);\n\n/**\n *\n */\nQuery.prototype._maxFetch = 10000;\nQuery.prototype.maxFetch = function(maxFetch) {\n  this._maxFetch = maxFetch;\n  return this;\n};\n\n/**\n *\n */\nQuery.prototype._autoFetch = false;\nQuery.prototype.autoFetch = function(autoFetch) {\n  this._autoFetch = autoFetch;\n  return this;\n};\n\n\n/**\n *\n */\nQuery.prototype.run = \nQuery.prototype.exec = \nQuery.prototype.execute = function(options, callback) {\n  options = options || {};\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  if (typeof callback === \"function\") {\n    this.once('response', function(res) { callback(null, res); });\n    this.once('error', function(err) { callback(err); });\n  }\n  var self = this;\n  var autoFetch = options.autoFetch || self._autoFetch;\n  var maxFetch = options.maxFetch || self._maxFetch;\n\n  if (!self._locator) { self.totalFetched = 0; }\n\n  var url = self._locator ?\n            self._conn.urls.rest.base + \"/query/\" + self._locator :\n            self._conn.urls.rest.base + \"/query?q=\" + encodeURIComponent(self._soql);\n\n  self._conn._request({\n    method : 'GET',\n    url : url\n  }, function(err, data) {\n    if (err) {\n      self.emit(\"error\", err);\n      return;\n    }\n    self.emit(\"response\", data, self);\n    self.totalSize = data.totalSize;\n    _.forEach(data.records, function(record, i) {\n      if (!self._stop) {\n        self.emit('record', record, i, self.totalFetched++, self);\n        self._stop = self.totalFetched >= maxFetch;\n      }\n    });\n    if (!data.done && autoFetch && !self._stop) {\n      self._locator = data.nextRecordsUrl.split('/').pop();\n      self.execute(options, callback);\n    } else {\n      self._stop = true;\n      self.emit('end', self);\n    }\n  });\n};\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":2105}]],"length":2105}
