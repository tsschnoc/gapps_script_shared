{"ts":1340651348770,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function() {\n  var XMLBuilder, XMLFragment;\n  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {\n    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor;\n    child.__super__ = parent.prototype;\n    return child;\n  };\n  XMLFragment = require('./XMLFragment');\n  XMLBuilder = (function() {\n    function XMLBuilder() {\n      XMLBuilder.__super__.constructor.call(this, null, '', {}, '');\n      this.isDoc = true;\n    }\n    __extends(XMLBuilder, XMLFragment);\n    XMLBuilder.prototype.begin = function(name, xmldec, doctype, options) {\n      var att, child, root;\n      if (!(name != null)) {\n        throw new Error(\"Root element needs a name\");\n      }\n      this.children = [];\n      name = '' + name || '';\n      if ((xmldec != null) && !(xmldec.version != null)) {\n        throw new Error(\"Version number is required\");\n      }\n      if (xmldec != null) {\n        xmldec.version = '' + xmldec.version || '';\n        if (!xmldec.version.match(/1\\.[0-9]+/)) {\n          throw new Error(\"Invalid version number: \" + xmldec.version);\n        }\n        att = {\n          version: xmldec.version\n        };\n        if (xmldec.encoding != null) {\n          xmldec.encoding = '' + xmldec.encoding || '';\n          if (!xmldec.encoding.match(/[A-Za-z](?:[A-Za-z0-9._-]|-)*/)) {\n            throw new Error(\"Invalid encoding: \" + xmldec.encoding);\n          }\n          att.encoding = xmldec.encoding;\n        }\n        if (xmldec.standalone != null) {\n          att.standalone = xmldec.standalone ? \"yes\" : \"no\";\n        }\n        child = new XMLFragment(this, '?xml', att);\n        this.children.push(child);\n      }\n      if (doctype != null) {\n        att = {\n          name: name\n        };\n        if (doctype.ext != null) {\n          doctype.ext = '' + doctype.ext || '';\n          att.ext = doctype.ext;\n        }\n        child = new XMLFragment(this, '!DOCTYPE', att);\n        this.children.push(child);\n      }\n      root = new XMLFragment(this, name, {});\n      root.isRoot = true;\n      this.children.push(root);\n      return root;\n    };\n    XMLBuilder.prototype.toString = function(options) {\n      var child, r, _i, _len, _ref;\n      r = '';\n      _ref = this.children;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        child = _ref[_i];\n        r += child.toString(options);\n      }\n      return r;\n    };\n    return XMLBuilder;\n  })();\n  module.exports = XMLBuilder;\n}).call(this);\n"]],"start1":0,"start2":0,"length1":0,"length2":2598}]],"length":2598}
