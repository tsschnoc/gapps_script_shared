{"ts":1340568439349,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Initiating a call example. Note: we use bogus sdp, so no real rtp session will be established.\n\nvar sip = require('sip');\nvar util = require('util');\nvar os = require('os');\n\nif(process.argv < 3 || !sip.parseUri(process.argv[2])) {\n  console.error('usage node make_call.js _uri_');\n  process.exit(1);\n}\n\nvar dialogs = {};\n\nfunction rstring() { return Math.floor(Math.random()*1e6).toString(); }\n\n\n//starting stack\nsip.start({}, function(rq) {\n  if(rq.headers.to.params.tag) { // check if it's an in dialog request\n    var id = [rq.headers['call-id'], rq.headers.to.params.tag, rq.headers.from.params.tag].join(':');\n    \n    if(dialogs[id])\n      dialogs[id](rq);\n    else\n      sip.send(sip.makeResponse(rq, 481, \"Call doesn't exists\"));\n  }\n  else\n    sip.send(sip.makeResponse(rq, 405, 'Method not allowed'));\n});\n\n\n// Making the call\n\nsip.send({\n  method: 'INVITE',\n  uri: process.argv[2],\n  headers: {\n    to: {uri: process.argv[2]},\n    from: {uri: 'sip:test@test', params: {tag: rstring()}},\n    'call-id': rstring(),\n    cseq: {method: 'INVITE', seq: Math.floor(Math.random() * 1e5)},\n    'content-type': 'application/sdp',\n    contact: [{uri: 'sip:101@' + os.hostname()}]  // if your call doesnt get in-dialog request, maybe os.hostname() isn't resolving in your ip address\n  },\n  content:\n    'v=0\\r\\n'+\n    'o=- 13374 13374 IN IP4 172.16.2.2\\r\\n'+\n    's=-\\r\\n'+\n    'c=IN IP4 172.16.2.2\\r\\n'+\n    't=0 0\\r\\n'+\n    'm=audio 16424 RTP/AVP 0 8 101\\r\\n'+\n    'a=rtpmap:0 PCMU/8000\\r\\n'+\n    'a=rtpmap:8 PCMA/8000\\r\\n'+\n    'a=rtpmap:101 telephone-event/8000\\r\\n'+\n    'a=fmtp:101 0-15\\r\\n'+\n    'a=ptime:30\\r\\n'+\n    'a=sendrecv\\r\\n'\n},\nfunction(rs) {\n  if(rs.status >= 300) {\n    console.log('call failed with status ' + rs.status);  \n  }\n  else if(rs.status < 200) {\n    console.log('call progress status ' + rs.status);\n  }\n  else {\n    // yes we can get multiple 2xx response with different tags\n    console.log('call answered with tag ' + rs.headers.to.params.tag);\n    \n    // sending ACK\n    sip.send({\n      method: 'ACK',\n      uri: rs.headers.contact[0].uri,\n      headers: {\n        to: rs.headers.to,\n        from: rs.headers.from,\n        'call-id': rs.headers['call-id'],\n        cseq: {method: 'ACK', seq: rs.headers.cseq.seq},\n        via: []\n      }\n    });\n\n    var id = [rs.headers['call-id'], rs.headers.from.params.tag, rs.headers.to.params.tag].join(':');\n\n    // registring our 'dialog' which is just function to process in-dialog requests\n    if(!dialogs[id]) {\n      dialogs[id] = function(rq) {\n        if(rq.method === 'BYE') {\n          console.log('call received bye');\n\n          delete dialogs[id];\n\n          sip.send(sip.makeResponse(rq, 200, 'Ok'));\n        }\n        else {\n          sip.send(sip.makeRespinse(rq, 405, 'Method not allowed'));\n        }\n      }\n    }\n  }\n});\n\n"]],"start1":0,"start2":0,"length1":0,"length2":2822}]],"length":2822}
