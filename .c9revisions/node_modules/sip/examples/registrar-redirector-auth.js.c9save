{"ts":1340223115960,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Simple registrar - redirector with authentication\n//\n\nvar sip = require('sip');\nvar digest = require('sip/digest');\nvar util = require('util');\nvar os = require('os');\n\nvar registry = {\n  '100': {password: '1234'},\n  '101':  {password:  'qwerty'}\n};\n\nvar realm = os.hostname();\n\nsip.start({\n  logger: { \n    send: function(message, address) { debugger; util.debug(\"send\\n\" + util.inspect(message, false, null)); },\n    recv: function(message, address) { debugger; util.debug(\"recv\\n\" + util.inspect(message, false, null)); }\n  }\n},\nfunction(rq) {\n  try {\n    if(rq.method === 'REGISTER') {  \n      \n      //looking up user info\n      var username = sip.parseUri(rq.headers.to.uri).user;\n      var userinfo = registry[username];\n\n      if(!userinfo) { // we don't know this user and answer with a challenge to hide this fact \n        var session = {realm: realm};\n        sip.send(digest.challenge({realm: realm}, sip.makeResponse(rq, 401, 'Authentication Required')));\n      }\n      else {\n        userinfo.session = userinfo.session || {realm: realm};\n        if(!digest.authenticateRequest(userinfo.session, rq, {user: username, password: userinfo.password})) {\n          sip.send(digest.challenge(userinfo.session, sip.makeResponse(rq, 401, 'Authentication Required')));\n        }\n        else {\n          userinfo.contact = rq.headers.contact;\n          var rs = sip.makeResponse(rq, 200, 'Ok');\n          rs.headers.contact = rq.headers.contact;\n          sip.send(rs);\n        }\n      }\n    }\n    else if(rq.method === 'INVITE') {\n      var username = sip.parseUri(rq.uri).user;\n      var userinfo = registry[username]\n      \n      if(userinfo && Array.isArray(userinfo.contact) && userinfo.contact.length > 0) {\n        var rs = sip.makeResponse(rq, 302, 'Moved');\n        rs.headers.contact = userinfo.contact;\n        sip.send(rs);\n      }\n      else {\n        sip.send(sip.makeResponse(rq, 404, 'Not Found'));\n      }\n    }\n    else {\n      sip.send(sip.makeResponse(rq, 405, 'Method Not Allowed'));\n    }\n  } catch(e) {\n    util.debug(e);\n    util.debug(e.stack);\n\n    sip.send(sip.makeResponse(rq, 500, \"Server Internal Error\"));\n  }\n});\n\n"]],"start1":0,"start2":0,"length1":0,"length2":2154}]],"length":2154}
