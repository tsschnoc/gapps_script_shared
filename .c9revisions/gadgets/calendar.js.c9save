{"ts":1352722789813,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function($) {\n  var calendar = null;\n  var debug_html = \"debug\";\n  var current_event = null;\n\n  function initGadget() {\n    google.calendar.read.subscribeToEvents(subscribeEventsCallback);\n    $.ui.dialog.defaults.bgiframe = true;\n    $.datepicker.setDefaults({\n      dateFormat: 'yymmdd'\n    });\n    google.load('gdata', '2.x');\n    google.setOnLoadCallback(function() {\n      calendar = new google.gdata.calendar.CalendarService('goocal-print');\n      calendar.useOAuth('google');\n      fetchData();\n      readSFData();\n    });\n    $('.hasDatepicker').datepicker();\n    $('.generate').click(function(e) {\n      e.preventDefault();\n      console.debug('generate Button pressed');\n      console.debug(current_event.timezone);\n      //            fetttttch();\n      console.debug($('#Project').val());\n      createEvent();\n      return false;\n    });\n  }\n\n  function showOnly(id) {\n    var sections = ['main', 'approval', 'waiting', 'loading', 'errors'];\n    for (var i = 0, section; section = sections[i]; ++i) {\n      $('#' + section).get(0).style.display = section === id ? 'block' : 'none';\n    }\n  }\n\n  function fetchData() {\n    $('#errors').hide();\n    var callback = function(response) {\n        if (response.oauthApprovalUrl) {\n          var popup = shindig.oauth.popup({\n            destination: response.oauthApprovalUrl,\n            windowOptions: 'height=600,width=800',\n            onOpen: function() {\n              showOnly('waiting');\n            },\n            onClose: function() {\n              showOnly('loading');\n              fetchData();\n            }\n          });\n          $('#personalize').get(0).onclick = popup.createOpenerOnClick();\n          $('#approvalLink').get(0).onclick = popup.createApprovedOnClick();\n          showOnly('approval');\n        }\n        else if (response.feed) {\n          calendar.getSettingsEntry('http://www.google.com/calendar/feeds/default/settings/' + google.gdata.calendar.SettingsProperty.NAME_TIMEZONE, function(r) {\n            showResults(response, r.entry.getSettingsProperty().getValue());\n            showOnly('main');\n            if (current_event == null) {\n              $('#main').get(0).style.display = 'none';\n            }\n          }, function() {\n            console.dir(arguments);\n          });\n        }\n        else {\n          if (console && console.debug) {\n            console.debug(response.stack);\n          }\n          $('#errors').html('Something went wrong').fadeIn();\n          showOnly('errors');\n        }\n        };\n    calendar.getAllCalendarsFeed('http://www.google.com/calendar/feeds/default/allcalendars/full', callback, callback);\n  }\n\n  function subscribeEventsCallback(e) {\n    var html = 'No event';\n    if (e) {\n      current_event = e;\n      console.debug(gadgets.json.stringify(e));\n      if (current_event != null) {\n        $('#main').get(0).style.display = 'block';\n      }\n      gadgets.window.adjustHeight();\n    }\n    else {\n      current_event = null;\n      $('#main').get(0).style.display = 'none';\n      console.debug(\"kein event\");\n      gadgets.window.adjustHeight();\n    }\n  }\n\n  function createEvent() {\n    try {\n      // The default \"private/full\" feed is used to insert event to the\n      // primary calendar of the authenticated user\n      var feedUri = 'http://www.google.com/calendar/feeds/default/private/full';\n      // Create an instance of CalendarEventEntry representing the new event\n      var entry = new google.gdata.calendar.CalendarEventEntry();\n      // Set the title of the event\n      \n      var sfid = $('#Project').val();\n      \n      var optname = $('option[value|=\"' + sfid + '\"]').text();\n\n\n      entry.setTitle(google.gdata.atom.Text.create(optname));\n      entry.setContent(google.gdata.atom.Text.create('#' + $('#Project').val()));\n\n\n      var extendedProp = new google.gdata.ExtendedProperty();\n      extendedProp.setName('sfid');\n      extendedProp.setRealm('shared');\n      extendedProp.setValue(sfid);\n\n      var extendedProp1 = new google.gdata.ExtendedProperty();\n      extendedProp1.setName('optname');\n      extendedProp1.setRealm('shared');\n      extendedProp1.setValue(optname);\n      \n\n      \n      entry.setExtendedProperties([extendedProp,extendedProp1]);\n      // Create a When object that will be attached to the event\n      var when = new google.gdata.When();\n      // Set the start and end time of the When object\n      //{\"timezone\":\"Europe/Zurich\",\"startTime\":{\"year\":2010,\"month\":12,\"date\":30,\"hour\":10,\"minute\":0,\"second\":0},\"endTime\":{\"year\":2010,\"month\":12,\"date\":30,\"hour\":11,\"minute\":30,\"second\":0}}\n      var startTimeString = current_event.startTime.year + '-' + ((current_event.startTime.month < 10) ? '0' + current_event.startTime.month : current_event.startTime.month) + '-' + ((current_event.startTime.date < 10) ? '0' + current_event.startTime.date : current_event.startTime.date) + 'T' + ((current_event.startTime.hour < 10) ? '0' + current_event.startTime.hour : current_event.startTime.hour) + ':' + ((current_event.startTime.minute < 10) ? '0' + current_event.startTime.minute : current_event.startTime.minute) + ':' + ((current_event.startTime.second < 10) ? '0' + current_event.startTime.second : current_event.startTime.second) + '.000+01:00';\n      var endTimeString = current_event.endTime.year + '-' + ((current_event.endTime.month < 10) ? '0' + current_event.endTime.month : current_event.endTime.month) + '-' + ((current_event.endTime.date < 10) ? '0' + current_event.endTime.date : current_event.endTime.date) + 'T' + ((current_event.endTime.hour < 10) ? '0' + current_event.endTime.hour : current_event.endTime.hour) + ':' + ((current_event.endTime.minute < 10) ? '0' + current_event.endTime.minute : current_event.endTime.minute) + ':' + ((current_event.endTime.second < 10) ? '0' + current_event.endTime.second : current_event.endTime.second) + '.000+01:00';\n      console.debug(startTimeString + ' ' + endTimeString);\n      //var startTime = google.gdata.DateTime.fromIso8601(\"2010-12-31T09:00:00.000+01:00\");\n      //var endTime = google.gdata.DateTime.fromIso8601(\"2010-12-31T10:00:00.000+01:00\");\n      var startTime = google.gdata.DateTime.fromIso8601(startTimeString);\n      var endTime = google.gdata.DateTime.fromIso8601(endTimeString);\n      when.setStartTime(startTime);\n      when.setEndTime(endTime);\n      // Add the When object to the event\n      entry.addTime(when);\n      console.debug(when);\n    }\n    catch (e) {\n      console.debug(e);\n    }\n    // The callback method that will be called after a successful insertion from insertEntry()\n    var callback = function(result) {\n        console.debug('event created!');\n        google.calendar.refreshEvents();\n        console.debug('events refreshed!');\n        google.calendar.showDate(2009, 12, 31);\n        google.calendar.showDate(current_event.startTime.year, current_event.startTime.month, current_event.startTime.date);\n        }\n        \n        // Error handler will be invoked if there is an error from insertEntry()\n        \n        \n    var handleError = function(error) {\n        console.debug(error);\n        }\n        \n        // Submit the request using the calendar service object\n        calendar.insertEntry(feedUri, entry, callback, handleError, google.gdata.calendar.CalendarEventEntry);\n  }\n\n  function readSFData() {\n    var postdata = \"<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:urn=\\\"urn:partner.soap.sforce.com\\\">   <soapenv:Header>   </soapenv:Header>  <soapenv:Body>     <urn:login>        <urn:username>thomas.schnocklake.sfdc1@gmail.com</urn:username>        <urn:password>Mantila5PkeUMFfyd5w5jXIEFbk63ajU</urn:password>      </urn:login>   </soapenv:Body></soapenv:Envelope>\";\n    var SOAPAction = \"testaction\";\n    var url = \"https://login.salesforce.com/services/Soap/u/20.0\";\n    makeSOAPRequest(url, SOAPAction, postdata);\n  }\n\n  function query1(url, sessionId, queryString) {\n    var postdata = \"<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:urn=\\\"urn:partner.soap.sforce.com\\\">   <soapenv:Header>      <urn:SessionHeader>         <urn:sessionId>**sessionId**</urn:sessionId>      </urn:SessionHeader>   </soapenv:Header>   <soapenv:Body>      <urn:query>         <urn:queryString>**queryString**</urn:queryString>      </urn:query>   </soapenv:Body></soapenv:Envelope>\";\n    var SOAPAction = \"testaction\";\n    postdata = postdata.replace(\"**sessionId**\", sessionId);\n    postdata = postdata.replace(\"**queryString**\", queryString);\n    console.debug(postdata);\n    makeSOAPRequest(url, SOAPAction, postdata);\n  }\n\n  function makeSOAPRequest(url, SOAPAction, postdata) {\n    try {\n      var params = {};\n      params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;\n      params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.DOM;\n      params[gadgets.io.RequestParameters.POST_DATA] = postdata;\n      params[gadgets.io.RequestParameters.HEADERS] = {\n        \"SOAPAction\": SOAPAction,\n        \"Content-Type\": \"text/xml;charset=UTF-8\"\n      };\n      gadgets.io.makeRequest(url, callback, params);\n    }\n    catch (e) {\n      console.debug(e);\n    }\n  }\n\n  function callback(obj) {\n    console.log(obj);\n    console.log(obj.data);\n/*  console.log(obj.data.childNodes);\n            console.log(obj.data.childNodes.length);\n          */\n    var document = obj.data;\n/*  console.log(document);\n            console.log(document.getElementsByTagName(\"sessionId\")[0]);\n            console.log(document.getElementsByTagName(\"sessionId\")[0].firstChild.nodeValue);\n            \n          */\n    if (document.getElementsByTagName(\"loginResponse\").length > 0) {\n      var sessionId = document.getElementsByTagName(\"sessionId\")[0].firstChild.nodeValue;\n      var serverUrl = document.getElementsByTagName(\"serverUrl\")[0].firstChild.nodeValue;\n      query1(serverUrl, sessionId, \"Select Id, Name FROM Account limit 10\");\n    }\n    else if (document.getElementsByTagName(\"queryResponse\").length > 0) {\n      console.log(document);\n      var records = document.getElementsByTagName(\"records\");\n      $('select.Project').empty();\n      for (var i = 0, len = records.length; record = records[i], i < len; i++) {\n        console.log(record);\n        console.log(record.getElementsByTagName(\"Name\")[0].firstChild.nodeValue);\n        var accountname = record.getElementsByTagName(\"Name\")[0].firstChild.nodeValue;\n        var accountid = record.getElementsByTagName(\"Id\")[0].firstChild.nodeValue;\n        //////////////////////////////////////////////      \n        //<option value=\"Nixtun\">Nixtun</option>      \n        var option = $('<option />').attr({\n          value: accountid\n        });\n        option.html(accountname);\n        console.log(option);\n        $('select.Project').append(option);\n      }\n    }\n  }\n\n  function showResults(feedRoot, timezone) {\n    var feed = feedRoot.feed;\n    var entries = feed.entry && feed.entry.length ? feed.entry : [];\n    $('ul.calendars').empty();\n/*\n                      $.each( entries, function () {\n                        var id = unescape( this.id.$t.substring(\n                          this.id.$t.lastIndexOf( '/' ) + 1\n                        ) );\n          \n                        var li = $( '<li />' )\n                          .append(\n                            $( '<input type=\"checkbox\" />' ).attr( {\n                              name: 'src',\n                              value: id,\n                              id: 'cb_' + id,\n                              checked: 'checked'\n                            } ) )\n                          .append(\n                            $( '<label />' )\n                              .attr( 'for', 'cb_' + id )\n                              .html( this.title.$t )\n                          );\n                        $( 'ul.calendars' ).append( li );\n                      } );\n          */\n    $('input[name=ctz]').val(timezone);\n  }\n  gadgets.util.registerOnLoadHandler(initGadget);\n})(jQuery);"]],"start1":0,"start2":0,"length1":0,"length2":11994}]],"length":11994}
{"contributors":[],"silentsave":false,"ts":1352722856967,"patch":[[{"diffs":[[0,"econd) + '.000+0"],[-1,"1"],[1,"2"],[0,":00';\n      var "]],"start1":5205,"start2":5205,"length1":33,"length2":33},{"diffs":[[0," '.000+0"],[-1,"1"],[1,"2"],[0,":00';\n  "]],"start1":5837,"start2":5837,"length1":17,"length2":17}]],"length":11994,"saved":false}
