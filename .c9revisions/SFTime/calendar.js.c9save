{"ts":1339795311538,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// https://www.google.com/calendar/b/0/render?nogagetcache=1&gadgeturl=https://raw.github.com/tsschnoc/gapps_script_shared/master/SFTime/calendar.xml?x=17\n(function($) {\n  var current_event = null;\n\n\n  var sf_timecards = null;\n  var gcal_timecards = null;\n\n  var viewstart = null;\n  var viewend = null;\n\n  var sf_version = '23.0';\n  var apikey = 'AIzaSyA9r8BLyijx8Wng-Ow1zG8AZ5-FHEoGZ8Q';\n  var RecordTypeID = '012D0000000Uu3y';\n\n  var Timekeeper__c = null;\n\n\n//  var consumerKey = \"3MVG9yZ.WNe6byQCAGhFiyIdi2we5m.7_OCAMWNLmiM6n6XV.jV6kb46NSTUdvxNrjT_CevTwM4ZYp0xT_p69\";\n//  var consumerSecret = \"884370394195470338\";\n  var consumerKey = null;\n  var consumerSecret = null;\n  var timeticket_calendarId = null;\n\n  var SF_RequestToken = null;\n\n  var oauth2_callbackurl = 'https://s3.amazonaws.com/tsschnocwinn/oAuthcallback.html';\n  var oAuthToken = null;\n  var oauth2_identity = null;\n\n\n  function debug(text) {\n    if (true) {\n      if (console && console.debug) {\n        console.debug(text);\n      }\n    }\n  }\n\n  function initGadget() {\n    google.calendar.read.subscribeToEvents(subscribeEventsCallback);\n    google.calendar.subscribeToDates(function(dates) {\n      viewstart = dates.startTime;\n      viewend = dates.endTime;\n    });\n\n    $(\".credentials\").addClass(\"invisible\");\n    $('.refreshCal').click(function(e) {\n      e.preventDefault();\n      syncCalendar();\n    });\n\n    $('.SaveEvent').click(function(e) {\n      e.preventDefault();\n\n      var caseId = $('#Case').val();\n      var caseDesc = $('option[value|=\"' + caseId + '\"]').text();\n\n      sf_soap_insertTimeTicket(caseId, caseDesc);\n      return false;\n    });\n\n    gadgets.window.adjustHeight();\n\n    window.addEventListener('message', popupMessageReceiver, false);\n    fetchData();\n  }\n\n  function showOnly(id) {\n    var sections = ['main', 'approval', 'waiting', 'loading', 'errors'];\n    for (var i = 0, section; section = sections[i]; ++i) {\n      $('#' + section).get(0).style.display = section === id ? 'block' : 'none';\n    }\n  }\n\n\n  function syncCalendar() {\n    reqCalTimecardEvents();\n    sf_ReqTimeTickets();\n\n    google.calendar.refreshEvents();\n    var refreshCode = \"google.calendar.showDate(2009, 12, 31);google.calendar.showDate(\" + viewstart.year + \",\" + viewstart.month + \",\" + viewstart.date + \");\";\n    setTimeout(refreshCode, 2000);\n    setTimeout(refreshCode, 5000);\n  }\n\n  function subscribeEventsCallback(e) {\n    if (e) {\n      //event aufgemacht\n      debug(gadgets.json.stringify(e));\n      if ((!e.calendar) || (e.calendar && e.calendar.email && e.calendar.email == timeticket_calendarId)) {\n        current_event = e;\n        $('#dialog').get(0).style.display = 'block';\n        gadgets.window.adjustHeight();\n        sf_queryCases();\n      }\n    }\n    else {\n      //event geschlossen\n      current_event = null;\n      $('#dialog').get(0).style.display = 'none';\n      debug(\"kein event\");\n      gadgets.window.adjustHeight();\n    }\n  }\n\n\n// SF Oauth dance\n\n\n\n  function initialize_sf_oauth() {\n    var prefs = new gadgets.Prefs();\n    var refresh_token = prefs.getString(\"refresh_token\");      \n    \n    if (refresh_token && refresh_token != '') {      \n      oAuthToken = {};\n      oAuthToken.refresh_token = refresh_token;\n      oauth_refresh();  \n      return;\n    }\n    \n    var oauthApprovalUrl = 'https://login.salesforce.com/services/oauth2/authorize?response_type=code' + '&client_id=' + encodeURIComponent(consumerKey) + '&redirect_uri=' + encodeURIComponent(oauth2_callbackurl) + '&state=mystate';\n    var popup = shindig.oauth.popup({\n      destination: oauthApprovalUrl,\n      windowOptions: 'height=600,width=800',\n      onOpen: function() {\n        showOnly('waiting');\n      },\n      onClose: function() {\n        showOnly('loading');\n      }\n    });\n    $('#personalize').get(0).onclick = popup.createOpenerOnClick();\n    $('#personalize').text('Authorize Salesforce');\n    $('#approvalLink').get(0).onclick = popup.createApprovedOnClick();\n    showOnly('approval');\n  }\n\n\n  function oauth2_callback(response) {\n      debug(response.data);\n      oAuthToken = response.data;\n      \n      if (response.rc!=200) {\n// auth fehler, refreshtoken l√∂schen und nochmal approven lassen        \n        var prefs = new gadgets.Prefs();\n        prefs.set(\"refresh_token\", null);      \n        initialize_sf_oauth();\n        return;\n      }\n\n      \n      if (oAuthToken.refresh_token) {\n        var prefs = new gadgets.Prefs();\n        prefs.set(\"refresh_token\", oAuthToken.refresh_token);        \n      }\n      \n      \n      var params = {};\n      params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;\n      params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;\n      params[gadgets.io.RequestParameters.HEADERS] = {\n        \"Accept\": \"application/json\",\n        \"X-PrettyPrint\": \"1\",\n        \"Authorization\": \"OAuth \" + oAuthToken.access_token\n      };\n\n\n      var identity_callback = function(response) {\n          debug(response.data);\n          oauth2_identity = response.data;\n          for (i in oauth2_identity.urls) {\n            oauth2_identity.urls[i] = oauth2_identity.urls[i].replace(\"{version}\",sf_version);                \n          }\n          showOnly('main');\n          $('.refresh').get(0).style.display = '';\n          gadgets.window.adjustHeight();\n          sf_searchTimekeeper();\n          };\n\n      makeCachedRequest(oAuthToken.id, identity_callback, params);\n\n  }\n  \n  function oauth_refresh() {  \n      var postdata = 'grant_type=refresh_token&' + 'client_id=' + encodeURIComponent(consumerKey) + '&client_secret=' + encodeURIComponent(consumerSecret) + '&refresh_token=' + encodeURIComponent(oAuthToken.refresh_token) + '&format=json';\n\n      var params = {};\n      params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;\n      params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;\n      params[gadgets.io.RequestParameters.POST_DATA] = postdata;\n      params[gadgets.io.RequestParameters.HEADERS] = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"X-PrettyPrint\": \"1\"\n      };\n\n      makeCachedRequest('https://login.salesforce.com/services/oauth2/token', oauth2_callback, params);\n  }  \n  \n\n\n  function popupMessageReceiver(event) {\n    //this function is called by the popup when it opens the oauth-callback-page and passed the loaded url back\n    \n    //alert ('Message received: ' + event.origin + ' : '  + event.data);\n    \n    if (SF_RequestToken === null) SF_RequestToken = {};\n\n    if (event.origin == 'https://s3.amazonaws.com') {\n      var pairs = event.data.split('?')[1].split('&');\n      for (var i in pairs) {\n        var kv = pairs[i].split('=');\n        SF_RequestToken[kv[0]] = decodeURIComponent(kv[1]);\n      }\n\n      debug(SF_RequestToken);\n\n      var postdata = 'grant_type=authorization_code&' + 'code=' + encodeURIComponent(SF_RequestToken.code) + '&client_id=' + encodeURIComponent(consumerKey) + '&client_secret=' + encodeURIComponent(consumerSecret) + '&redirect_uri=' + encodeURIComponent(oauth2_callbackurl) + '&state=gettoken&format=json';\n\n      var params = {};\n      params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;\n      params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;\n      params[gadgets.io.RequestParameters.POST_DATA] = postdata;\n      params[gadgets.io.RequestParameters.HEADERS] = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"X-PrettyPrint\": \"1\"\n      };\n\n      makeCachedRequest('https://login.salesforce.com/services/oauth2/token', oauth2_callback, params);\n    }\n  }\n  \n// end: SF Oauth dane  \n\n  function fetchData() {\n    $('#errors').hide();\n    var callback = function(response) {\n        if (response.oauthApprovalUrl) {\n          var popup = shindig.oauth.popup({\n            destination: response.oauthApprovalUrl,\n            windowOptions: 'height=600,width=800',\n            onOpen: function() {\n              showOnly('waiting');\n            },\n            onClose: function() {\n              showOnly('loading');\n              fetchData();\n            }\n          });\n          $('#personalize').get(0).onclick = popup.createOpenerOnClick();\n          $('#approvalLink').get(0).onclick = popup.createApprovedOnClick();\n          showOnly('approval');\n        }\n        else if (response.data) {\n          showOnly('main');\n          if (current_event == null) {\n            $('#dialog')[0].style.display = 'none';\n          }\n          \n          for (i in response.data.items) {\n            var c = response.data.items[i];\n            if (c.summary == 'Timecards' || c.summary == 'TimeCards') {                             \n              consumerKey = c.description.split('/')[0];\n              consumerSecret = c.description.split('/')[1];    \n              timeticket_calendarId = c.id;\n            }\n          }\n          \n          initialize_sf_oauth();\n        }\n        else {\n          if (console && console.debug) {\n            console.debug(response.stack);\n          }\n          $('#errors').html('Something went wrong').fadeIn();\n          showOnly('errors');\n        }\n        };\n\n    var callUrl = 'https://www.googleapis.com/calendar/v3/users/me/calendarList?minAccessRole=owner&pp=1&key=' + apikey;\n    var params = {};\n\n    params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;;\n    params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.OAUTH;\n    params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = \"google\";\n    params[gadgets.io.RequestParameters.OAUTH_USE_TOKEN] = \"always\";\n    params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;\n    params[gadgets.io.RequestParameters.HEADERS] = {\n      \"X-PrettyPrint\": \"1\",\n      \"GData-Version\": \"3.0\",\n      \"Content-Type\": \"application/json\"\n    };\n\n    makeCachedRequest(callUrl, callback, params);\n  }\n\n\n\n  function reqCalTimecardEvents() {\n    var callUrl = 'https://www.googleapis.com/calendar/v3/calendars/' + encodeURIComponent(timeticket_calendarId) + '/events' + '?timeMax=' + encodeURIComponent(new Date(viewend.year, viewend.month - 1, viewend.date, 23, 59, 59, 999).toISOString()) + '&timeMin=' + encodeURIComponent(new Date(viewstart.year, viewstart.month - 1, viewstart.date).toISOString()) + '&fields=items(description%2Cend%2CextendedProperties%2Cid%2Clocation%2Cstart%2Cstatus%2Csummary%2Cupdated)%2Cupdated&pp=1' + '&key=' + apikey;\n\n    debug('callUrl ' + callUrl);\n\n    var params = {};\n    var postdata = \"\";\n\n    params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;;\n    params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.OAUTH;\n    params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = \"google\";\n    params[gadgets.io.RequestParameters.OAUTH_USE_TOKEN] = \"always\";\n    params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;\n    params[gadgets.io.RequestParameters.HEADERS] = {\n      \"X-PrettyPrint\": \"1\",\n      \"GData-Version\": \"3.0\",\n      \"Content-Type\": \"application/json\"\n    };\n\n    var callback = function(obj) {\n        gcal_timecards = {};\n        if (obj.data != null && obj.data.items != null) {\n          for (var i = 0; i < obj.data.items.length; i++) {\n            var event = obj.data.items[i];\n            debug(event.id);\n            event.record = JSON.parse(event.description);\n            gcal_timecards[event.record.Id] = event;\n\n          }\n        }\n        matchTimeCards();\n        };\n\n    makeCachedRequest(callUrl, callback, params);\n  }\n\n\n  function matchTimeCards() {\n\n    var insert_timecards = [];\n    var delete_timecards = [];\n\n\n    if (sf_timecards != null && gcal_timecards != null) {\n\n    }\n    else {\n      return;\n    }\n\n    for (var i in sf_timecards) {\n      debug(i);\n      if (gcal_timecards[i] != null) {\n        //compare\n        debug('compare');\n        debug(gcal_timecards[i].record.LastModifiedDate + \" \" + sf_timecards[i].LastModifiedDate);\n        if (gcal_timecards[i].record.LastModifiedDate == sf_timecards[i].LastModifiedDate) {\n          // tue nichts\n          debug('gleich');\n        }\n        else {\n          insert_timecards.push(sf_timecards[i]);\n          delete_timecards.push(gcal_timecards[i]);\n\n        }\n        delete gcal_timecards[i];\n        delete sf_timecards[i];\n      }\n      else {\n        insert_timecards.push(sf_timecards[i]);\n        delete sf_timecards[i];\n      }\n\n    }\n\n    debug('insert_timecards ' + insert_timecards);\n    debug('delete_timecards ' + delete_timecards);\n\n    for (var i in gcal_timecards) {\n\n      delete_timecards.push(gcal_timecards[i]);\n      delete gcal_timecards[i];\n    }\n\n    for (var i in insert_timecards) {\n      insertSFToGcalEvent(insert_timecards[i]);\n    }\n\n    for (var i in delete_timecards) {\n      delEvent(delete_timecards[i].id);\n    }\n\n\n    google.calendar.refreshEvents();\n\n    sf_timecards = null;\n    gcal_timecards = null;\n\n  }\n\n  function delEvent(eventid) {\n    var callUrl = 'https://www.googleapis.com/calendar/v3/calendars/' + encodeURIComponent(timeticket_calendarId) + '/events/' + eventid + '?pp=1&key=' + apikey;\n    var params = {};\n    var postdata = \"\";\n\n\n    params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;\n    params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.OAUTH;\n    params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = \"google\";\n    params[gadgets.io.RequestParameters.OAUTH_USE_TOKEN] = \"always\";\n    params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.DELETE;\n    params[gadgets.io.RequestParameters.HEADERS] = {\n      \"X-PrettyPrint\": \"1\",\n      \"GData-Version\": \"3.0\",\n      \"Content-Type\": \"application/json\"\n    };\n\n\n    makeCachedRequest(callUrl, null, params);\n  }\n\n  function insertSFToGcalEvent(sftimecard) {\n    var callUrl = 'https://www.googleapis.com/calendar/v3/calendars/' + encodeURIComponent(timeticket_calendarId) + '/events?sendNotifications=false&pp=1&key=' + apikey;\n    var params = {};\n\n\n    var insEvent = {};\n    insEvent.description = JSON.stringify(sftimecard, null, '\\t');\n    debug(sftimecard.Id);\n    if (sftimecard.Case__r.Project__r) {\n      insEvent.summary = sftimecard.Case__r.Project__r.Account__r.Name + ' - ' + sftimecard.Description__c;      \n    } else {\n      insEvent.summary = sftimecard.Case__r.Name + ' - ' + sftimecard.Description__c;      \n    }\n    insEvent.location = 'https://parxch.my.salesforce.com/' + sftimecard.Id + '?';\n\n\n    var startTime = null;\n    if (sftimecard.TimeStart__c) {\n      startTime = new Date(Date.parse(sftimecard.Date__c + \"T\" + sftimecard.TimeStart__c.substring(0, 2) + \":\" + sftimecard.TimeStart__c.substring(2, 4) + \":00+02:00\"));\n    } else {\n      startTime = new Date(Date.parse(sftimecard.Date__c + \"T\" + \"09\" + \":\" + \"00\" + \":00+01:00\"));\n    }\n\n\n    insEvent.start = {\n      \"dateTime\": startTime.format(\"isoUtcDateTime\")\n    };\n\n\n    startTime = new Date(startTime.getTime() + sftimecard.HoursWorked__c * 60 * 60 * 1000);\n    insEvent.end = {\n      \"dateTime\": startTime.format(\"isoUtcDateTime\")\n    };\n\n    var postdata = JSON.stringify(insEvent);\n\n    params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;\n    params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.OAUTH;\n    params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = \"google\";\n    params[gadgets.io.RequestParameters.OAUTH_USE_TOKEN] = \"always\";\n    params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;\n    params[gadgets.io.RequestParameters.POST_DATA] = postdata;\n    params[gadgets.io.RequestParameters.HEADERS] = {\n      \"X-PrettyPrint\": \"1\",\n      \"GData-Version\": \"3.0\",\n      \"Content-Type\": \"application/json\"\n    };\n\n\n    makeCachedRequest(callUrl, insCallback, params);\n  }\n\n  function insCallback(obj) {\n    debug(obj);\n  }\n\n\n\n  function sf_ReqTimeTickets() {\n    var queryString = \"Select Case__r.Project__r.Account__r.Name, Id ,IsDeleted ,Name ,CurrencyIsoCode ,RecordTypeId ,CreatedDate ,CreatedById ,LastModifiedDate ,LastModifiedById ,SystemModstamp ,LastActivityDate ,ConnectionReceivedId ,ConnectionSentId ,Project__c ,Timekeeper__c ,Date__c ,HoursWorked__c ,Rate__c ,Task__c ,Description__c ,AmountWorked__c ,Case__c ,CaseSubject__c ,Invoice__c ,ShowOnReport__c ,HoursBillable__c ,RateInternal__c ,AmountBillable__c ,HoursUnbillable__c ,AmountUnbillable__c ,TimeStart__c ,CostInternal__c \" + \" FROM TimeCard__c \" + \" WHERE Timekeeper__c = \\'\" + Timekeeper__c + \"\\'\" + \"   and Date__c >= \" + viewstart.year + \"-\" + (viewstart.month < 10 ? \"0\" : \"\") + viewstart.month + \"-\" + (viewstart.date < 10 ? \"0\" : \"\") + viewstart.date + \" and Date__c <= \" + viewend.year + \"-\" + (viewend.month < 10 ? \"0\" : \"\") + viewend.month + \"-\" + (viewend.date < 10 ? \"0\" : \"\") + viewend.date;\n\n    var callUrl = oauth2_identity.urls.rest + \"query/?q=\" + encodeURIComponent(queryString);\n    var params = {};\n    params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;\n    params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;\n    //params[gadgets.io.RequestParameters.POST_DATA] = postdata;\n    params[gadgets.io.RequestParameters.HEADERS] = {\n      \"Authorization\": \"OAuth \" + oAuthToken.access_token,\n      \"X-PrettyPrint\": \"1\"\n    };\n\n    var sf_timecards_tmp = {};\n    var callback = function(obj) {\n        for (var i = 0; i < obj.data.records.length; i++) {\n          record = obj.data.records[i];\n          debug(JSON.stringify(record));\n\n          sf_timecards_tmp[record.Id] = record;\n        }\n\n        debug(sf_timecards_tmp);\n        sf_timecards = sf_timecards_tmp;\n        matchTimeCards();\n        };\n\n    makeCachedRequest(callUrl, callback, params, 0);\n  }\n\n\n  function sf_queryCases() {\n    //    var queryString = \"Select c.Id, c.Description, c.CaseNumber From Case c\";\n    var queryString = \"Select Id, Name, Case__r.Id, Case__r.Subject, Case__r.Description, Case__r.Project__r.Name, Case__r.Project__r.Account__r.Name, CreatedDate  from TimeCard__c \" + \" WHERE Timekeeper__c = \\'\" + Timekeeper__c + \"\\' order by CreatedDate desc Limit 150\";\n    var callUrl = oauth2_identity.urls.rest + \"query/?q=\" + encodeURIComponent(queryString);\n    //debug(\"!!!!!!!!!!!!!!!!!! callUrl :\" + callUrl);\n    var params = {};\n    params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;\n    params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;\n    //params[gadgets.io.RequestParameters.POST_DATA] = postdata;\n    params[gadgets.io.RequestParameters.HEADERS] = {\n      \"Authorization\": \"OAuth \" + oAuthToken.access_token,\n      \"X-PrettyPrint\": \"1\"\n    };\n\n    var ids = [];\n\n    var callback = function(obj) {\n        $('select.Case').empty();\n        for (var i = 0; i < obj.data.records.length; i++) {\n          var record = obj.data.records[i];\n\n          if (ids.indexOf(record.Case__r.Id) < 0 && ids.length < 20) {\n            ids.push(record.Case__r.Id);\n            var option = $('<option />').attr({\n              value: record.Case__r.Id\n            });\n            if (record.Case__r.Project__r) {\n              option.html(record.Case__r.Subject + record.Case__r.Project__r.Name);  \n            } else {\n              option.html(record.Case__r.Subject + record.Case__r.Name);\n            }\n            \n            debug(option);\n            $('select.Case').append(option);\n          }\n        }\n        };\n\n\n    makeCachedRequest(callUrl, callback, params);\n  }\n\n\n\n\n  function sf_searchTimekeeper() {\n    var queryString = \"Select Id, Name from Contact \" + \" WHERE Email = \\'\" + oauth2_identity.email + \"\\' \";\n    var callUrl = oauth2_identity.urls.rest + \"query/?q=\" + encodeURIComponent(queryString);\n\n    var params = {};\n    params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;\n    params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;\n    params[gadgets.io.RequestParameters.HEADERS] = {\n      \"Authorization\": \"OAuth \" + oAuthToken.access_token,\n      \"X-PrettyPrint\": \"1\"\n    };\n\n    var ids = [];\n\n    var callback = function(obj) {\n        for (var i = 0; i < obj.data.records.length; i++) {\n          var record = obj.data.records[i];\n          Timekeeper__c = record.Id;\n        }\n    };\n\n\n    makeCachedRequest(callUrl, callback, params);\n  }\n\n\n\n\n  function sf_soap_insertTimeTicket(caseId, caseDesc) {\n\n    var startDate = current_event.startTime.year + '-' + ((current_event.startTime.month < 10) ? '0' + current_event.startTime.month : current_event.startTime.month) + '-' + ((current_event.startTime.date < 10) ? '0' + current_event.startTime.date : current_event.startTime.date);\n\n\n    var ticket = {};\n\n    ticket.Case__c = caseId;\n    ticket.Description__c = $('#Description').val();\n    ticket.Timekeeper__c = '' + Timekeeper__c + '';\n    ticket.RecordTypeID = '' + RecordTypeID + '';\n    ticket.Date__c = startDate;\n\n    ticket.TimeStart__c = ((current_event.startTime.hour < 10) ? '0' + current_event.startTime.hour : current_event.startTime.hour) + '' + ((current_event.startTime.minute < 10) ? '0' + current_event.startTime.minute : current_event.startTime.minute);\n    ticket.HoursWorked__c = ((current_event.endTime.hour * 60 + current_event.endTime.minute) - (current_event.startTime.hour * 60 + current_event.startTime.minute)) / 60;\n\n    var objXML = \"\";\n    for (i in ticket) {\n      objXML += \"<\" + i + \">\" + ticket[i] + \"</\" + i + \">\\n\";\n    }\n\n    var postdata = '';\n    postdata += \"<soapenv:Envelope xmlns:soapenv=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:urn=\\\"urn:partner.soap.sforce.com\\\" xmlns:urn1=\\\"urn:sobject.partner.soap.sforce.com\\\">\";\n    postdata += \"   <soapenv:Header>\";\n    postdata += \"      <urn:SessionHeader>\";\n    postdata += \"         <urn:sessionId>\" + oAuthToken.access_token + \"</urn:sessionId>\";\n    postdata += \"      </urn:SessionHeader>\";\n    postdata += \"   </soapenv:Header>\";\n    postdata += \"   <soapenv:Body>\";\n    postdata += \"      <urn:create>\";\n    postdata += \"         <urn:sObjects>\";\n    postdata += \"            <urn1:type>TimeCard__c</urn1:type>\";\n    postdata += objXML\n    postdata += \"         </urn:sObjects>\";\n    postdata += \"      </urn:create>\";\n    postdata += \"   </soapenv:Body>\";\n    postdata += \"</soapenv:Envelope>\";\n\n    var params = {};\n    params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;\n    params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.DOM;\n    params[gadgets.io.RequestParameters.POST_DATA] = postdata;\n    params[gadgets.io.RequestParameters.HEADERS] = {};\n    params[gadgets.io.RequestParameters.HEADERS].SOAPAction = \"Dummy\";\n    params[gadgets.io.RequestParameters.HEADERS]['Content-Type'] = \"text/xml;charset=UTF-8\";\n    debug(\"!!!!!!!!!!\" + params);\n\n    var privateCallback = function(obj) {\n        debug(\"!!!!!!!!!!!!!!!!!! sf_soap_insertTimeTicket callback obj :\" + obj);\n\n        syncCalendar();\n\n        };\n    makeCachedRequest(oauth2_identity.urls.partner, privateCallback, params);\n  } //sf_soap_insertTimeTicket\n\n  gadgets.util.registerOnLoadHandler(initGadget);\n})(jQuery);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction makeCachedRequest(url, callback, params, refreshInterval) {\n  var ts = new Date().getTime();\n  var sep = \"?\";\n  if (refreshInterval && refreshInterval > 0) {\n    ts = Math.floor(ts / (refreshInterval * 1000));\n  }\n  if (url.indexOf(\"?\") > -1) {\n    sep = \"&\";\n  }\n  url = [url, sep, \"nocache=\", ts].join(\"\");\n  gadgets.io.makeRequest(url, callback, params);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n * Date Format 1.2.3\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\n * MIT license\n *\n * Includes enhancements by Scott Trenda <scott.trenda.net>\n * and Kris Kowal <cixar.com/~kris.kowal/>\n *\n * Accepts a date, a mask, or a date and a mask.\n * Returns a formatted version of the given date.\n * The date defaults to the current date/time.\n * The mask defaults to dateFormat.masks.default.\n */\n\nvar dateFormat = function() {\n    var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\n        timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\n        timezoneClip = /[^-+\\dA-Z]/g,\n        pad = function(val, len) {\n        val = String(val);\n        len = len || 2;\n        while (val.length < len) val = \"0\" + val;\n        return val;\n        };\n\n    // Regexes and supporting functions are cached through closure\n    return function(date, mask, utc) {\n      var dF = dateFormat;\n\n      // You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\n      if (arguments.length == 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\n        mask = date;\n        date = undefined;\n      }\n\n      // Passing date through Date applies Date.parse, if necessary\n      date = date ? new Date(date) : new Date;\n      if (isNaN(date)) throw SyntaxError(\"invalid date\");\n\n      mask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\n\n      // Allow setting the utc argument via the mask\n      if (mask.slice(0, 4) == \"UTC:\") {\n        mask = mask.slice(4);\n        utc = true;\n      }\n\n      var _ = utc ? \"getUTC\" : \"get\",\n          d = date[_ + \"Date\"](),\n          D = date[_ + \"Day\"](),\n          m = date[_ + \"Month\"](),\n          y = date[_ + \"FullYear\"](),\n          H = date[_ + \"Hours\"](),\n          M = date[_ + \"Minutes\"](),\n          s = date[_ + \"Seconds\"](),\n          L = date[_ + \"Milliseconds\"](),\n          o = utc ? 0 : date.getTimezoneOffset(),\n          flags = {\n          d: d,\n          dd: pad(d),\n          ddd: dF.i18n.dayNames[D],\n          dddd: dF.i18n.dayNames[D + 7],\n          m: m + 1,\n          mm: pad(m + 1),\n          mmm: dF.i18n.monthNames[m],\n          mmmm: dF.i18n.monthNames[m + 12],\n          yy: String(y).slice(2),\n          yyyy: y,\n          h: H % 12 || 12,\n          hh: pad(H % 12 || 12),\n          H: H,\n          HH: pad(H),\n          M: M,\n          MM: pad(M),\n          s: s,\n          ss: pad(s),\n          l: pad(L, 3),\n          L: pad(L > 99 ? Math.round(L / 10) : L),\n          t: H < 12 ? \"a\" : \"p\",\n          tt: H < 12 ? \"am\" : \"pm\",\n          T: H < 12 ? \"A\" : \"P\",\n          TT: H < 12 ? \"AM\" : \"PM\",\n          Z: utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\n          o: (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n          S: [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\n          };\n\n      return mask.replace(token, function($0) {\n        return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n      });\n    };\n    }();\n\n// Some common format strings\ndateFormat.masks = {\n  \"default\": \"ddd mmm dd yyyy HH:MM:ss\",\n  shortDate: \"m/d/yy\",\n  mediumDate: \"mmm d, yyyy\",\n  longDate: \"mmmm d, yyyy\",\n  fullDate: \"dddd, mmmm d, yyyy\",\n  shortTime: \"h:MM TT\",\n  mediumTime: \"h:MM:ss TT\",\n  longTime: \"h:MM:ss TT Z\",\n  isoDate: \"yyyy-mm-dd\",\n  isoTime: \"HH:MM:ss\",\n  isoDateTime: \"yyyy-mm-dd'T'HH:MM:ss\",\n  isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\n};\n\n// Internationalization strings\ndateFormat.i18n = {\n  dayNames: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n  monthNames: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n};\n\n// For convenience...\nDate.prototype.format = function(mask, utc) {\n  return dateFormat(this, mask, utc);\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * API to assist with management of the OAuth popup window.\n *\n * MAKE A COPY OF THIS FILE.  Do not hot link to it.\n *\n * Expected usage:\n *\n * 1) Gadget attempts to fetch OAuth data for the user and discovers that\n * approval is needed.  The gadget creates two new UI elements:\n *\n *   - a \"personalize this gadget\" button or link\n *   - a \"personalization done\" button or link, which is initially hidden.\n *\n * With any luck, the user will never need to click the \"personalization done\"\n * button, but it should be created and displayed in case we can't\n * automatically detect when the user has approved access to their gadget.\n *\n * 2) Gadget creates a popup object and associates event handlers with the UI\n * elements:\n *\n *    var popup = shindig.oauth.popup({\n *        destination: response.oauthApprovalUrl,\n *        windowOptions: \"height=300,width=200\",\n *        onOpen: function() {\n *          $(\"personalizeDone\").style.display = \"block\"\n *        },\n *        onClose: function() {\n *          $(\"personalizeDone\").style.display = \"none\"\n *          $(\"personalizeDone\").style.display = \"none\"\n *          fetchData();\n *        }\n *    });\n *\n *    personalizeButton.onclick = popup.createOpenerOnClick();\n *    personalizeDoneButton.onclick = popup.createApprovedOnClick();\n *\n * 3) When the user clicks the personalization button/link, a window is opened\n *    to the approval URL.\n *\n * 4) When the window is closed, the oauth popup calls the onClose function\n *    and the gadget attempts to fetch the user's data.\n */\n\nvar shindig = shindig || {};\nshindig.oauth = shindig.oauth || {};\n\n/**\n * Initialize a new OAuth popup manager.  Parameters must be specified as\n * an object, e.g. shindig.oauth.popup({destination: somewhere,...});\n *\n * @param {String} destination Target URL for the popup window.\n * @param {String} windowOptions Options for window.open, used to specify\n *     look and feel of the window.\n * @param {function} onOpen Function to call when the window is opened.\n * @param {function} onClose Function to call when the window is closed.\n */\nshindig.oauth.popup = function(options) {\n  if (!(\"destination\" in options)) {\n    throw \"Must specify options.destination\";\n  }\n  if (!(\"windowOptions\" in options)) {\n    throw \"Must specify options.windowOptions\";\n  }\n  if (!(\"onOpen\" in options)) {\n    throw \"Must specify options.onOpen\";\n  }\n  if (!(\"onClose\" in options)) {\n    throw \"Must specify options.onClose\";\n  }\n  var destination = options.destination;\n  var windowOptions = options.windowOptions;\n  var onOpen = options.onOpen;\n  var onClose = options.onClose;\n\n  // created window\n  var win = null;\n  // setInterval timer\n  var timer = null;\n\n  // Called when we recieve an indication the user has approved access, either\n  // because they closed the popup window or clicked an \"I've approved\" button.\n\n  function handleApproval() {\n    if (timer) {\n      window.clearInterval(timer);\n      timer = null;\n    }\n    if (win) {\n      win.close();\n      win = null;\n    }\n    onClose();\n    return false;\n  }\n\n  // Called at intervals to check whether the window has closed.  If it has,\n  // we act as if the user had clicked the \"I've approved\" link.\n\n  function checkClosed() {\n    if ((!win) || win.closed) {\n      win = null;\n      handleApproval();\n    }\n  }\n\n  /**\n   * @return an onclick handler for the \"open the approval window\" link\n   */\n\n  function createOpenerOnClick() {\n    return function() {\n      // If a popup blocker blocks the window, we do nothing.  The user will\n      // need to approve the popup, then click again to open the window.\n      // Note that because we don't call window.open until the user has clicked\n      // something the popup blockers *should* let us through.\n      win = window.open(destination, \"_blank\", windowOptions);\n      TestWin = win;\n      if (win) {\n        // Poll every 100ms to check if the window has been closed\n        timer = window.setInterval(checkClosed, 100);\n        onOpen();\n      }\n      return false;\n    };\n  }\n\n  /**\n   * @return an onclick handler for the \"I've approved\" link.  This may not\n   * ever be called.  If we successfully detect that the window was closed,\n   * this link is unnecessary.\n   */\n\n  function createApprovedOnClick() {\n    return handleApproval;\n  }\n\n  return {\n    createOpenerOnClick: createOpenerOnClick,\n    createApprovedOnClick: createApprovedOnClick\n  };\n};\n\n\n\n\n\n\n\n\n////////////////////////////////////\n////////////////////////////////////\n//    var responseFunc;\n//    var searchTerm;\n////////////////////////////////////\n\nfunction sf_searchCases() {\n  var queryString = \"FIND {*\" + searchTerm.term + \"*} RETURNING Case(Id, Description, Subject, CaseNumber)  \";\n  var callUrl = oauth2_identity.urls.rest + \"search/?q=\" + encodeURIComponent(queryString);\n  //debug(\"!!!!!!!!!!!!!!!!!! callUrl :\" + callUrl);\n  var params = {};\n  params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;\n  params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;\n  //params[gadgets.io.RequestParameters.POST_DATA] = postdata;\n  params[gadgets.io.RequestParameters.HEADERS] = {\n    \"Authorization\": \"OAuth \" + token,\n    \"X-PrettyPrint\": \"1\"\n  };\n\n  var callback = function(obj) {\n      if (obj.data == null) {\n        responseFunc([]);\n        return;\n      }\n      var arr = [];\n      for (var i = 0; i < obj.data.length; i++) {\n        var record = obj.data[i];\n\n        arr.push({\n          label: record.Subject,\n          value: record.Id\n        });\n      }\n\n      //      responseFunc([{label:\"hallo\",value:\"depp\"},{label:\"hallo\",value:\"depp\"},{label:\"hallo\",value:\"depp\"}]);\n      responseFunc(arr);\n      };\n\n\n  makeCachedRequest(callUrl, callback, params);\n}\n\n"]],"start1":0,"start2":0,"length1":0,"length2":34345}]],"length":34345}
{"contributors":[],"silentsave":false,"ts":1352723092028,"patch":[[{"diffs":[[0,"+ \":00+0"],[-1,"2"],[1,"1"],[0,":00\"));\n"]],"start1":14759,"start2":14759,"length1":17,"length2":17}]],"length":34345,"saved":false}
{"contributors":[],"silentsave":true,"ts":1365742149995,"patch":[[{"diffs":[[0,"ps://raw"],[-1,"."],[0,"github.c"]],"start1":74,"start2":74,"length1":17,"length2":16}]],"length":34344,"saved":false}
{"contributors":[],"silentsave":true,"ts":1366656195209,"patch":[[{"diffs":[[0,"ERVICE_NAME] = \""],[-1,"googl"],[1,"oauthcalendarservic"],[0,"e\";\n    params[g"]],"start1":9548,"start2":9548,"length1":37,"length2":51}]],"length":34358,"saved":false}
{"ts":1366656200808,"patch":[[{"diffs":[[0,"ERVICE_NAME] = \""],[-1,"googl"],[1,"oauthcalendarservic"],[0,"e\";\n    params[g"]],"start1":10799,"start2":10799,"length1":37,"length2":51}]],"length":34372,"saved":false}
{"ts":1366656209082,"patch":[[{"diffs":[[0,"ERVICE_NAME] = \""],[-1,"googl"],[1,"oauthcalendarservic"],[0,"e\";\n    params[g"]],"start1":13481,"start2":13481,"length1":37,"length2":51}]],"length":34386,"saved":false}
{"ts":1366656214901,"patch":[[{"diffs":[[0,"AME] = \""],[-1,"googl"],[1,"oauthcalendarservic"],[0,"e\";\n    "]],"start1":15476,"start2":15476,"length1":21,"length2":35}]],"length":34400,"saved":false}
{"contributors":[],"silentsave":true,"ts":1366871298265,"patch":[[{"diffs":[[0,"g(2, 4) + \":00+0"],[-1,"1"],[1,"2"],[0,":00\"));\n    } el"]],"start1":14792,"start2":14792,"length1":33,"length2":33}]],"length":34400,"saved":false}
{"ts":1366871300279,"patch":[[{"diffs":[[0,"+ \":00+0"],[-1,"1"],[1,"2"],[0,":00\"));\n"]],"start1":14913,"start2":14913,"length1":17,"length2":17}]],"length":34400,"saved":false}
